{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"All credits goes to Closure Library this is just a cheat sheet. Please feel free to contribute on GitHub . Original work by kuzmisin - Github This page is definitely not a tutorial. It is considered to be a quick reference with examples, tips, ... Closure Library https://developers.google.com/closure/library/ git clone https://github.com/google/closure-library.git Annotations Api reference Wiki Compiler https://developers.google.com/closure/compiler/ https://github.com/google/closure-compiler Download Annotation reference Error and Warning Reference Templates https://developers.google.com/closure/templates/ https://github.com/google/closure-templates Download XtbGenerator https://github.com/kuzmisin/xtbgenerator Other Grunt Plugins plovr: a Closure build tool Closureplease.com A community maintained resource for Closure. Book Closure: The Definitive Guide","title":"Home"},{"location":"#closure-library","text":"https://developers.google.com/closure/library/ git clone https://github.com/google/closure-library.git Annotations Api reference Wiki","title":"Closure Library"},{"location":"#compiler","text":"https://developers.google.com/closure/compiler/ https://github.com/google/closure-compiler Download Annotation reference Error and Warning Reference","title":"Compiler"},{"location":"#templates","text":"https://developers.google.com/closure/templates/ https://github.com/google/closure-templates Download","title":"Templates"},{"location":"#xtbgenerator","text":"https://github.com/kuzmisin/xtbgenerator","title":"XtbGenerator"},{"location":"#other","text":"Grunt Plugins plovr: a Closure build tool Closureplease.com A community maintained resource for Closure.","title":"Other"},{"location":"#book","text":"Closure: The Definitive Guide","title":"Book"},{"location":"annotation/","text":"For more examples visit compiler annotation Usage Function types /** * @param {type} a * @return {type} */ function foo ( a ) { return a ; } Type casting let b = /** @type {type} */ ( a ); foo ( /** @type {type} */ ( a )); Object types /** * @type {type} */ Foo . prototype . a ; Any type /** * @type {*} Whatever */ Foo . prototype . a ; Multiple types /** * @type {string|number|undefined} String or number or undefined */ Foo . prototype . b ; Nullable types /** * @type {?string} String or null */ Foo . prototype . c ; /** * @param {!string} a Required parameter * @param {string=} opt_b Optional parameter */ Foo . prototype . bar = function ( a , opt_b ) { } Primitive types /** @type {number} */ /** @type {string} */ /** @type {boolean} */ /** @type {undefined} */ /** @type {null} */ Const /** * @const * @type {number} */ Foo . A = 1 ; /** * @const * @type {string} */ Foo . B = text ; Array /** * @param {Array} */ /** * @param {Array. * } Array of unknown/whatever items * @param {Array. string } Items in array are strings * @param {Array. Object } Items in array are Objects */ /** * @param {Array. Array. string } Items in array are Arrays of strings */ Object /** * @param {Object} */ /** * @param {Object. number, string } Object with number keys and string values */ Function /** * @param {Function} */ /** * @param {function(): boolean} Param is a function which return boolean * @param {function(number): boolean} Function with number as parameter and return boolean */ Html /** @type {Element} */ /** @type {Document} */ /** @type {DocumentFragment} */ /** @type {Node} */ /** @type {NodeList} */ /** @type {Window} */ /** @type {HTMLAnchorElement} */ /** @type {HTMLDocument} */ /** @type {HTMLElement} */ /** @type {HTMLFormElement} */ /** @type {HTMLImageElement} */ Typedef /** * @typedef {{ * id: number, * direction: string * }} */ Foo . NAVIGATE_INFO ; /** * @type {Foo.NAVIGATE_INFO} */ Foo . prototype . info ; /** * Function returning typedef . Property style can be string or null. * * @return {{link: string, href: string, style: (string|null)}} */ Foo . prototype . getLink = function () { // ... return { link : Link , href : http://... , style : null }; } Enum /** * @enum {string} */ Foo . Api = { GET : /get , PUT : /put } /** * @enum {number} */ Foo . Direction = { UP : 1 , DOWN : 2 } VarArgs /** * @param {...string} var_args */ Foo . prototype . insertAll = function ( var_args ) { // arguments, arguments.length }; OOP /** * @interface */ Foo = function () {}; /** * @param {number} a */ Foo . prototype . bar = function ( a ) {}; /** * @constructor * @implements {Foo} */ app . Some = () { }; /** * @param {number} a */ app . Some . prototype . bar = function ( a ) { }; /** * @constructor * @extends {app.Some} */ app . Other = () { goog . base ( this ); };","title":"Annotation"},{"location":"annotation/#usage","text":"","title":"Usage"},{"location":"annotation/#function-types","text":"/** * @param {type} a * @return {type} */ function foo ( a ) { return a ; }","title":"Function types"},{"location":"annotation/#type-casting","text":"let b = /** @type {type} */ ( a ); foo ( /** @type {type} */ ( a ));","title":"Type casting"},{"location":"annotation/#object-types","text":"/** * @type {type} */ Foo . prototype . a ;","title":"Object types"},{"location":"annotation/#any-type","text":"/** * @type {*} Whatever */ Foo . prototype . a ;","title":"Any type"},{"location":"annotation/#multiple-types","text":"/** * @type {string|number|undefined} String or number or undefined */ Foo . prototype . b ;","title":"Multiple types"},{"location":"annotation/#nullable-types","text":"/** * @type {?string} String or null */ Foo . prototype . c ; /** * @param {!string} a Required parameter * @param {string=} opt_b Optional parameter */ Foo . prototype . bar = function ( a , opt_b ) { }","title":"Nullable types"},{"location":"annotation/#primitive-types","text":"/** @type {number} */ /** @type {string} */ /** @type {boolean} */ /** @type {undefined} */ /** @type {null} */","title":"Primitive types"},{"location":"annotation/#const","text":"/** * @const * @type {number} */ Foo . A = 1 ; /** * @const * @type {string} */ Foo . B = text ;","title":"Const"},{"location":"annotation/#array","text":"/** * @param {Array} */ /** * @param {Array. * } Array of unknown/whatever items * @param {Array. string } Items in array are strings * @param {Array. Object } Items in array are Objects */ /** * @param {Array. Array. string } Items in array are Arrays of strings */","title":"Array"},{"location":"annotation/#object","text":"/** * @param {Object} */ /** * @param {Object. number, string } Object with number keys and string values */","title":"Object"},{"location":"annotation/#function","text":"/** * @param {Function} */ /** * @param {function(): boolean} Param is a function which return boolean * @param {function(number): boolean} Function with number as parameter and return boolean */","title":"Function"},{"location":"annotation/#html","text":"/** @type {Element} */ /** @type {Document} */ /** @type {DocumentFragment} */ /** @type {Node} */ /** @type {NodeList} */ /** @type {Window} */ /** @type {HTMLAnchorElement} */ /** @type {HTMLDocument} */ /** @type {HTMLElement} */ /** @type {HTMLFormElement} */ /** @type {HTMLImageElement} */","title":"Html"},{"location":"annotation/#typedef","text":"/** * @typedef {{ * id: number, * direction: string * }} */ Foo . NAVIGATE_INFO ; /** * @type {Foo.NAVIGATE_INFO} */ Foo . prototype . info ; /** * Function returning typedef . Property style can be string or null. * * @return {{link: string, href: string, style: (string|null)}} */ Foo . prototype . getLink = function () { // ... return { link : Link , href : http://... , style : null }; }","title":"Typedef"},{"location":"annotation/#enum","text":"/** * @enum {string} */ Foo . Api = { GET : /get , PUT : /put } /** * @enum {number} */ Foo . Direction = { UP : 1 , DOWN : 2 }","title":"Enum"},{"location":"annotation/#varargs","text":"/** * @param {...string} var_args */ Foo . prototype . insertAll = function ( var_args ) { // arguments, arguments.length };","title":"VarArgs"},{"location":"annotation/#oop","text":"/** * @interface */ Foo = function () {}; /** * @param {number} a */ Foo . prototype . bar = function ( a ) {}; /** * @constructor * @implements {Foo} */ app . Some = () { }; /** * @param {number} a */ app . Some . prototype . bar = function ( a ) { }; /** * @constructor * @extends {app.Some} */ app . Other = () { goog . base ( this ); };","title":"OOP"},{"location":"dependencies/","text":"goog.provide file: app/some.js goog . provide ( app.Some ); /** * @constructor */ app . Some = function () { }; goog.require file: app/other.js goog . provide ( app.Other ); goog . require ( app.Some ); goog . require ( goog.dom ); /** * @constructor * @extends {app.Some} */ app . Other = function () { goog . base ( this ); this . element = goog . dom . getElement ( other ); }; goog.exportSymbol goog . provide ( app.start ); app . start = function () { // ... }; // make app.start accessible after ADVANCED_OPTIMIZATIONS goog . exportSymbol ( app.start , app . start ); @export annotation When using the @export annotation, be certain that you use the --generate_exports compiler flag. goog . provide ( app.start ); /** * Make {@code app.start} accessible after {@code ADVANCED_OPTIMIZATIONS}. * @export */ app . start = function () { // ... };","title":"Dependencies"},{"location":"dependencies/#googprovide","text":"file: app/some.js goog . provide ( app.Some ); /** * @constructor */ app . Some = function () { };","title":"goog.provide"},{"location":"dependencies/#googrequire","text":"file: app/other.js goog . provide ( app.Other ); goog . require ( app.Some ); goog . require ( goog.dom ); /** * @constructor * @extends {app.Some} */ app . Other = function () { goog . base ( this ); this . element = goog . dom . getElement ( other ); };","title":"goog.require"},{"location":"dependencies/#googexportsymbol","text":"goog . provide ( app.start ); app . start = function () { // ... }; // make app.start accessible after ADVANCED_OPTIMIZATIONS goog . exportSymbol ( app.start , app . start );","title":"goog.exportSymbol"},{"location":"dependencies/#export-annotation","text":"When using the @export annotation, be certain that you use the --generate_exports compiler flag. goog . provide ( app.start ); /** * Make {@code app.start} accessible after {@code ADVANCED_OPTIMIZATIONS}. * @export */ app . start = function () { // ... };","title":"@export annotation"},{"location":"dom/","text":"DOM goog.dom.append /* * Appends a node with text or other nodes. * @param {!Node} parent The node to append nodes to. * @param {...goog.dom.Appendable} var_args The things to append to the node. */ goog . dom . append = function ( parent , var_args ) {} let container = goog . dom . getElement ( container ); // get div id= container let child = goog . dom . createDom ( div ); // create empty div goog . dom . append ( container , child ); // append div into div id= container !-- before -- div id = container / div !-- after -- div id = container div / div / div goog.dom.createDom /** * @param {string} tagName Tag to create. * @param {(Object|Array. string |string)=} opt_attributes * @param {...(Object|string|Array|NodeList)} var_args Further DOM nodes or strings for text nodes * @return {!Element} Reference to a DOM node. */ goog . dom . createDom = function ( tagName , opt_attributes , var_args ) { let div = goog . dom . createDom ( div , undefined , Div text content ); // div Div text content /div let a = goog . dom . createDom ( a , { href : #href }, Link ); let li = goog . dom . createDom ( li , { class : menu-item }, a ); // li class= menu-item a href= #href Link /a /li goog.dom.getDocument /** * Gets the document object being used by the dom library. * @return {!Document} Document object. */ goog . dom . getDocument = function () {} goog.dom.getElement /** * Get Element by ID * @param {string|Element} element Element ID or a DOM node. * @return {Element} The element with the given ID, or the node passed in. */ goog . dom . getElement = function ( element ) {}; let container = goog . dom . getElement ( container ); // div id= container /div goog.dom.getElementsByTagNameAndClass /* * @param {?string=} opt_tag Element tag name. * @param {?string=} opt_class Optional class name. * @param {(Document|Element)=} opt_el Optional element to look in. * @return { {length: number} } Array-like list of elements */ goog . dom . getElementsByTagNameAndClass = function ( opt_tag , opt_class , opt_el ) {} body div id = menu ul li class = menu Menu item 1 / li li class = menu Menu item 2 / li / ul / div div id = navigation ul li Navigation item 1 / li li Navigation item 2 / li / ul / div / body let allLi = goog . dom . getElementsByTagNameAndClass ( li ); // allLi.length 4 // allLi[0] li Menu item 1 /li // ... // allLi[3] li Navigation item 2 /li let menuLi = goog . dom . getElementsByTagNameAndClass ( li , menu ); // menuLi.length 2 // menuLi[0] li class= menu Menu item 1 /li // menuLi[1] li class= menu Menu item 2 /li let navigation = goog . dom . getElement ( navigation ); let navigationLi = goog . dom . getElementsByTagNameAndClass ( li , undefined , navigation ); // navigationLi.length 2 // navigationLi[0] li Navigation item 1 /li // navigationLi[1] li Navigation item 2 /li goog.dom.getNextElementSibling /** * Returns the first next sibling that is an element. * @param {Node} node The node to get the next sibling element of. * @return {Element} The next sibling of node that is an element. */ goog . dom . getNextElementSibling = function ( node ) {} ul li Item 1 / li li Item 2 / li / ul let first = goog . dom . getElementsByTagNameAndClass ( li , undefined )[ 0 ]; let next = goog . dom . getNextElementSibling ( first ); // next li Item 2 /li goog.dom.getParentElement /** * Returns an element s parent, if it s an Element. * @param {Element} element The DOM element. * @return {Element} The parent, or null if not an Element. */ goog . dom . getParentElement = function ( element ) {} ul li Item 1 / li li Item 2 / li / ul let li = goog . dom . getElementsByTagNameAndClass ( li , undefined )[ 0 ]; let ul = goog . dom . getParentElement ( li ); // ul ul /ul goog.dom.getTextContent /* * @param {Node} node The node from which we are getting content. * @return {string} The text content. */ goog . dom . getTextContent = function ( node ) {} div id = container span Span / span a href = #href Link / a Text / div let container = goog . dom . getElement ( container ); let text = goog . dom . getTextContent ( container ); // Span Link Text goog.dom.getViewportSize /** * @return {!goog.math.Size} The dimensions of the viewport (window) */ goog . dom . getViewportSize = function () {} let viewPort = goog . dom . getViewportSize (); // viewPort.width [px] // viewPort.height [px] goog.dom.insertSibling... /** * @param {Node} newNode Node to insert. * @param {Node} refNode Reference node to insert after. */ goog . dom . insertSiblingBefore = function ( newNode , refNode ) {} goog . dom . insertSiblingAfter = function ( newNode , refNode ) {} ul li Item 1 / li li Item 2 / li / ul let firstLi = goog . dom . getElementsByTagNameAndClass ( li )[ 0 ]; let before = goog . dom . createDom ( li , undefined , Item before ); let after = goog . dom . createDom ( li , undefined , Item after ); goog . dom . insertSiblingBefore ( before , firstLi ); goog . dom . insertSiblingAfter ( after , firstLi ); ul li Item before / li li Item 1 / li li Item after / li li Item 2 / li / ul goog.dom.removeNode /** * Removes a node from its parent. * @param {Node} node The node to remove. * @return {Node} The node removed if removed; else, null. */ goog . dom . removeNode = function ( node ) {} goog.dom.setProperties /** * Sets multiple properties on a node. * @param {Element} element DOM node to set properties on. * @param {Object} properties Hash of property:value pairs. */ goog . dom . setProperties = function ( element , properties ) {} let div = goog . dom . createDom ( div ); goog . dom . setProperties ( div , { style : background-color: red , class : div-class , id : container }); div style = background-color: red; class = div-class id = container / div DataSet /** * Gets a custom data attribute from an element. * @param {Element} element DOM node to get the custom data attribute from. * @param {string} key Key for the custom data attribute. * @return {?string} The attribute value, if it exists. */ goog . dom . dataset . get = function ( element , key ) {} /** * Checks whether custom data attribute exists on an element. * @param {Element} element DOM node to get the custom data attribute from. * @param {string} key Key for the custom data attribute. * @return {boolean} Whether the attibute exists. */ goog . dom . dataset . has = function ( element , key ) {} div id = container data-action = test / div let container = goog . dom . getElement ( container ); let hasDataActionAttribute = goog . dom . dataset . has ( container , action ); let dataActionAttribute = goog . dom . dataset . get ( container , action ); // hasDataActionAttribute true // dataActionAttribute test Forms goog.dom.forms.getFormDataMap /** * Returns form data as a map of name to value arrays. * @param {HTMLFormElement} form The form. * @return {!goog.structs.Map} */ goog . dom . forms . getFormDataMap = function ( form ) {} form id = form input type = text name = text value = text / input type = radio name = radio value = 1 checked / input type = checkbox name = checkbox checked / select name = select option value = 1 1 / option / select / form let form = /** @type {HTMLFormElement} */ ( goog . dom . getElement ( form )); let data = goog . dom . forms . getFormDataMap ( form ); // data.get( text )[0] text // data.get( radio )[0] 1 // data.get( checkbox )[0] on // data.get( select )[0] 1 goog.dom.forms.setDisabled /** * Enables or disables either all elements in a form or a single form element. * @param {Element} el The element, either a form or an element within a form. * @param {boolean} disabled Whether the element should be disabled. */ goog . dom . forms . setDisabled = function ( el , disabled ) {} let form = /** @type {HTMLFormElement} */ ( goog . dom . getElement ( form )); goog . dom . forms . setDisabled ( form , true ); goog . dom . forms . setDisabled ( form . elements [ text ], true ); input type = text name = text value = text disabled / goog.dom.forms.setValue /** * Sets the current value of any element with a type. * @param {Element} el The element. * @param {*=} opt_value (array for setting the value of select multiple elements) */ goog . dom . forms . setValue = function ( el , opt_value ) {} goog . dom . forms . setValue ( form . elements [ text ], new text ); ClassList goog.dom.classlist.add, goog.dom.classlist.addAll /** * Adds a class to an element. Does not add multiples of class names. This * method may throw a DOM exception for an invalid or empty class name if * DOMTokenList is used. * @param {Element} element DOM node to add class to. * @param {string} className Class name to add. */ goog . dom . classlist . add = function ( element , className ) {} /** * Convenience method to add a number of class names at once. * @param {Element} element The element to which to add classes. * @param {goog.array.ArrayLike. string } classesToAdd An array-like object * containing a collection of class names to add to the element. * This method may throw a DOM exception if classesToAdd contains invalid * or empty class names. */ goog . dom . classlist . addAll = function ( element , classesToAdd ) {} let container = goog . dom . getElement ( container ); goog . dom . classlist . add ( container , cls1 ); goog.dom.classlist.get /** * Gets an array-like object of class names on an element. * @param {Element} element DOM node to get the classes of. * @return {!goog.array.ArrayLike} Class names on {@code element}. */ goog . dom . classlist . get = function ( element ) { let container = goog . dom . getElement ( container ); let classes = goog . dom . classlist . get ( container ); // classes [ class1 , class2 ] goog.dom.classlist.remove, goog.dom.classlist.removeAll /** * Removes a class from an element. This method may throw a DOM exception * for an invalid or empty class name if DOMTokenList is used. * @param {Element} element DOM node to remove class from. * @param {string} className Class name to remove. */ goog . dom . classlist . remove = function ( element , className ) {} /** * Removes a set of classes from an element. Prefer this call to * repeatedly calling {@code goog.dom.classlist.remove} if you want to remove * a large set of class names at once. * @param {Element} element The element from which to remove classes. * @param {goog.array.ArrayLike. string } classesToRemove An array-like object * containing a collection of class names to remove from the element. * This method may throw a DOM exception if classesToRemove contains invalid * or empty class names. */ goog . dom . classlist . removeAll = function ( element , classesToRemove ) {} let container = goog . dom . getElement ( container ); goog . dom . classlist . remove ( container , cls1 ); Style goog.style.getSize /** * Gets the height and width of an element * @param {Element} element Element to get size of. * @return {!goog.math.Size} Object with width/height properties. */ goog . style . getSize = function ( element ) {} let container = goog . dom . getElement ( container ); let size = goog . style . getSize ( container ); // size.width [px] // size.height [px] goog.style.setElementShown /** * Shows or hides an element from the page * @param {Element} el Element to show or hide. * @param {*} isShown */ goog . style . setElementShown = function ( el , isShown ) {} let container = goog . dom . getElement ( container ); goog . style . setElementShown ( container , false ); goog.style.setHeight /** * Set the height of an element. * @param {Element} element Element to set the height of. * @param {string|number} height */ goog . style . setHeight = function ( element , height ) { let container = goog . dom . getElement ( container ); goog . style . setHeight ( container , 100 ); goog.style.setOpacity /** * Sets the opacity of a node (x-browser). * @param {Element} el Elements whose opacity has to be set. * @param {number|string} alpha Between 0 and 1 or an empty string to clear the opacity */ goog . style . setOpacity = function ( el , alpha ) {} let container = goog . dom . getElement ( container ); goog . style . setOpacity ( container , 0.5 ); goog.style.setStyle /** * Sets a style value on an element. * @param {Element} element The element to change. * @param {string|Object} style * @param {string|number|boolean=} opt_value */ goog . style . setStyle = function ( element , style , opt_value ) {} let container = goog . dom . getElement ( container ); goog . style . setStyle ( container , { background-color : red , height : 100px });","title":"Dom"},{"location":"dom/#dom","text":"","title":"DOM"},{"location":"dom/#googdomappend","text":"/* * Appends a node with text or other nodes. * @param {!Node} parent The node to append nodes to. * @param {...goog.dom.Appendable} var_args The things to append to the node. */ goog . dom . append = function ( parent , var_args ) {} let container = goog . dom . getElement ( container ); // get div id= container let child = goog . dom . createDom ( div ); // create empty div goog . dom . append ( container , child ); // append div into div id= container !-- before -- div id = container / div !-- after -- div id = container div / div / div","title":"goog.dom.append"},{"location":"dom/#googdomcreatedom","text":"/** * @param {string} tagName Tag to create. * @param {(Object|Array. string |string)=} opt_attributes * @param {...(Object|string|Array|NodeList)} var_args Further DOM nodes or strings for text nodes * @return {!Element} Reference to a DOM node. */ goog . dom . createDom = function ( tagName , opt_attributes , var_args ) { let div = goog . dom . createDom ( div , undefined , Div text content ); // div Div text content /div let a = goog . dom . createDom ( a , { href : #href }, Link ); let li = goog . dom . createDom ( li , { class : menu-item }, a ); // li class= menu-item a href= #href Link /a /li","title":"goog.dom.createDom"},{"location":"dom/#googdomgetdocument","text":"/** * Gets the document object being used by the dom library. * @return {!Document} Document object. */ goog . dom . getDocument = function () {} goog.dom.getElement /** * Get Element by ID * @param {string|Element} element Element ID or a DOM node. * @return {Element} The element with the given ID, or the node passed in. */ goog . dom . getElement = function ( element ) {}; let container = goog . dom . getElement ( container ); // div id= container /div","title":"goog.dom.getDocument"},{"location":"dom/#googdomgetelementsbytagnameandclass","text":"/* * @param {?string=} opt_tag Element tag name. * @param {?string=} opt_class Optional class name. * @param {(Document|Element)=} opt_el Optional element to look in. * @return { {length: number} } Array-like list of elements */ goog . dom . getElementsByTagNameAndClass = function ( opt_tag , opt_class , opt_el ) {} body div id = menu ul li class = menu Menu item 1 / li li class = menu Menu item 2 / li / ul / div div id = navigation ul li Navigation item 1 / li li Navigation item 2 / li / ul / div / body let allLi = goog . dom . getElementsByTagNameAndClass ( li ); // allLi.length 4 // allLi[0] li Menu item 1 /li // ... // allLi[3] li Navigation item 2 /li let menuLi = goog . dom . getElementsByTagNameAndClass ( li , menu ); // menuLi.length 2 // menuLi[0] li class= menu Menu item 1 /li // menuLi[1] li class= menu Menu item 2 /li let navigation = goog . dom . getElement ( navigation ); let navigationLi = goog . dom . getElementsByTagNameAndClass ( li , undefined , navigation ); // navigationLi.length 2 // navigationLi[0] li Navigation item 1 /li // navigationLi[1] li Navigation item 2 /li","title":"goog.dom.getElementsByTagNameAndClass"},{"location":"dom/#googdomgetnextelementsibling","text":"/** * Returns the first next sibling that is an element. * @param {Node} node The node to get the next sibling element of. * @return {Element} The next sibling of node that is an element. */ goog . dom . getNextElementSibling = function ( node ) {} ul li Item 1 / li li Item 2 / li / ul let first = goog . dom . getElementsByTagNameAndClass ( li , undefined )[ 0 ]; let next = goog . dom . getNextElementSibling ( first ); // next li Item 2 /li","title":"goog.dom.getNextElementSibling"},{"location":"dom/#googdomgetparentelement","text":"/** * Returns an element s parent, if it s an Element. * @param {Element} element The DOM element. * @return {Element} The parent, or null if not an Element. */ goog . dom . getParentElement = function ( element ) {} ul li Item 1 / li li Item 2 / li / ul let li = goog . dom . getElementsByTagNameAndClass ( li , undefined )[ 0 ]; let ul = goog . dom . getParentElement ( li ); // ul ul /ul","title":"goog.dom.getParentElement"},{"location":"dom/#googdomgettextcontent","text":"/* * @param {Node} node The node from which we are getting content. * @return {string} The text content. */ goog . dom . getTextContent = function ( node ) {} div id = container span Span / span a href = #href Link / a Text / div let container = goog . dom . getElement ( container ); let text = goog . dom . getTextContent ( container ); // Span Link Text","title":"goog.dom.getTextContent"},{"location":"dom/#googdomgetviewportsize","text":"/** * @return {!goog.math.Size} The dimensions of the viewport (window) */ goog . dom . getViewportSize = function () {} let viewPort = goog . dom . getViewportSize (); // viewPort.width [px] // viewPort.height [px]","title":"goog.dom.getViewportSize"},{"location":"dom/#googdominsertsibling","text":"/** * @param {Node} newNode Node to insert. * @param {Node} refNode Reference node to insert after. */ goog . dom . insertSiblingBefore = function ( newNode , refNode ) {} goog . dom . insertSiblingAfter = function ( newNode , refNode ) {} ul li Item 1 / li li Item 2 / li / ul let firstLi = goog . dom . getElementsByTagNameAndClass ( li )[ 0 ]; let before = goog . dom . createDom ( li , undefined , Item before ); let after = goog . dom . createDom ( li , undefined , Item after ); goog . dom . insertSiblingBefore ( before , firstLi ); goog . dom . insertSiblingAfter ( after , firstLi ); ul li Item before / li li Item 1 / li li Item after / li li Item 2 / li / ul","title":"goog.dom.insertSibling..."},{"location":"dom/#googdomremovenode","text":"/** * Removes a node from its parent. * @param {Node} node The node to remove. * @return {Node} The node removed if removed; else, null. */ goog . dom . removeNode = function ( node ) {}","title":"goog.dom.removeNode"},{"location":"dom/#googdomsetproperties","text":"/** * Sets multiple properties on a node. * @param {Element} element DOM node to set properties on. * @param {Object} properties Hash of property:value pairs. */ goog . dom . setProperties = function ( element , properties ) {} let div = goog . dom . createDom ( div ); goog . dom . setProperties ( div , { style : background-color: red , class : div-class , id : container }); div style = background-color: red; class = div-class id = container / div","title":"goog.dom.setProperties"},{"location":"dom/#dataset","text":"/** * Gets a custom data attribute from an element. * @param {Element} element DOM node to get the custom data attribute from. * @param {string} key Key for the custom data attribute. * @return {?string} The attribute value, if it exists. */ goog . dom . dataset . get = function ( element , key ) {} /** * Checks whether custom data attribute exists on an element. * @param {Element} element DOM node to get the custom data attribute from. * @param {string} key Key for the custom data attribute. * @return {boolean} Whether the attibute exists. */ goog . dom . dataset . has = function ( element , key ) {} div id = container data-action = test / div let container = goog . dom . getElement ( container ); let hasDataActionAttribute = goog . dom . dataset . has ( container , action ); let dataActionAttribute = goog . dom . dataset . get ( container , action ); // hasDataActionAttribute true // dataActionAttribute test","title":"DataSet"},{"location":"dom/#forms","text":"","title":"Forms"},{"location":"dom/#googdomformsgetformdatamap","text":"/** * Returns form data as a map of name to value arrays. * @param {HTMLFormElement} form The form. * @return {!goog.structs.Map} */ goog . dom . forms . getFormDataMap = function ( form ) {} form id = form input type = text name = text value = text / input type = radio name = radio value = 1 checked / input type = checkbox name = checkbox checked / select name = select option value = 1 1 / option / select / form let form = /** @type {HTMLFormElement} */ ( goog . dom . getElement ( form )); let data = goog . dom . forms . getFormDataMap ( form ); // data.get( text )[0] text // data.get( radio )[0] 1 // data.get( checkbox )[0] on // data.get( select )[0] 1","title":"goog.dom.forms.getFormDataMap"},{"location":"dom/#googdomformssetdisabled","text":"/** * Enables or disables either all elements in a form or a single form element. * @param {Element} el The element, either a form or an element within a form. * @param {boolean} disabled Whether the element should be disabled. */ goog . dom . forms . setDisabled = function ( el , disabled ) {} let form = /** @type {HTMLFormElement} */ ( goog . dom . getElement ( form )); goog . dom . forms . setDisabled ( form , true ); goog . dom . forms . setDisabled ( form . elements [ text ], true ); input type = text name = text value = text disabled /","title":"goog.dom.forms.setDisabled"},{"location":"dom/#googdomformssetvalue","text":"/** * Sets the current value of any element with a type. * @param {Element} el The element. * @param {*=} opt_value (array for setting the value of select multiple elements) */ goog . dom . forms . setValue = function ( el , opt_value ) {} goog . dom . forms . setValue ( form . elements [ text ], new text );","title":"goog.dom.forms.setValue"},{"location":"dom/#classlist","text":"","title":"ClassList"},{"location":"dom/#googdomclasslistadd-googdomclasslistaddall","text":"/** * Adds a class to an element. Does not add multiples of class names. This * method may throw a DOM exception for an invalid or empty class name if * DOMTokenList is used. * @param {Element} element DOM node to add class to. * @param {string} className Class name to add. */ goog . dom . classlist . add = function ( element , className ) {} /** * Convenience method to add a number of class names at once. * @param {Element} element The element to which to add classes. * @param {goog.array.ArrayLike. string } classesToAdd An array-like object * containing a collection of class names to add to the element. * This method may throw a DOM exception if classesToAdd contains invalid * or empty class names. */ goog . dom . classlist . addAll = function ( element , classesToAdd ) {} let container = goog . dom . getElement ( container ); goog . dom . classlist . add ( container , cls1 );","title":"goog.dom.classlist.add, goog.dom.classlist.addAll"},{"location":"dom/#googdomclasslistget","text":"/** * Gets an array-like object of class names on an element. * @param {Element} element DOM node to get the classes of. * @return {!goog.array.ArrayLike} Class names on {@code element}. */ goog . dom . classlist . get = function ( element ) { let container = goog . dom . getElement ( container ); let classes = goog . dom . classlist . get ( container ); // classes [ class1 , class2 ]","title":"goog.dom.classlist.get"},{"location":"dom/#googdomclasslistremove-googdomclasslistremoveall","text":"/** * Removes a class from an element. This method may throw a DOM exception * for an invalid or empty class name if DOMTokenList is used. * @param {Element} element DOM node to remove class from. * @param {string} className Class name to remove. */ goog . dom . classlist . remove = function ( element , className ) {} /** * Removes a set of classes from an element. Prefer this call to * repeatedly calling {@code goog.dom.classlist.remove} if you want to remove * a large set of class names at once. * @param {Element} element The element from which to remove classes. * @param {goog.array.ArrayLike. string } classesToRemove An array-like object * containing a collection of class names to remove from the element. * This method may throw a DOM exception if classesToRemove contains invalid * or empty class names. */ goog . dom . classlist . removeAll = function ( element , classesToRemove ) {} let container = goog . dom . getElement ( container ); goog . dom . classlist . remove ( container , cls1 );","title":"goog.dom.classlist.remove, goog.dom.classlist.removeAll"},{"location":"dom/#style","text":"","title":"Style"},{"location":"dom/#googstylegetsize","text":"/** * Gets the height and width of an element * @param {Element} element Element to get size of. * @return {!goog.math.Size} Object with width/height properties. */ goog . style . getSize = function ( element ) {} let container = goog . dom . getElement ( container ); let size = goog . style . getSize ( container ); // size.width [px] // size.height [px]","title":"goog.style.getSize"},{"location":"dom/#googstylesetelementshown","text":"/** * Shows or hides an element from the page * @param {Element} el Element to show or hide. * @param {*} isShown */ goog . style . setElementShown = function ( el , isShown ) {} let container = goog . dom . getElement ( container ); goog . style . setElementShown ( container , false );","title":"goog.style.setElementShown"},{"location":"dom/#googstylesetheight","text":"/** * Set the height of an element. * @param {Element} element Element to set the height of. * @param {string|number} height */ goog . style . setHeight = function ( element , height ) { let container = goog . dom . getElement ( container ); goog . style . setHeight ( container , 100 );","title":"goog.style.setHeight"},{"location":"dom/#googstylesetopacity","text":"/** * Sets the opacity of a node (x-browser). * @param {Element} el Elements whose opacity has to be set. * @param {number|string} alpha Between 0 and 1 or an empty string to clear the opacity */ goog . style . setOpacity = function ( el , alpha ) {} let container = goog . dom . getElement ( container ); goog . style . setOpacity ( container , 0.5 );","title":"goog.style.setOpacity"},{"location":"dom/#googstylesetstyle","text":"/** * Sets a style value on an element. * @param {Element} element The element to change. * @param {string|Object} style * @param {string|number|boolean=} opt_value */ goog . style . setStyle = function ( element , style , opt_value ) {} let container = goog . dom . getElement ( container ); goog . style . setStyle ( container , { background-color : red , height : 100px });","title":"goog.style.setStyle"},{"location":"events/","text":"Listen goog.events.listen /** * Adds an event listener for a specific event on a DOM Node or goog.events.EventTarget * * @param {goog.events.ListenableType} src The node to listen to events on. * @param {string|Array. string } type Event type or array of event types. * @param {Function|Object} listener Callback method * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to false) * @param {Object=} opt_handler Element in whose scope to call the listener. * @return {goog.events.Key} Unique key for the listener. */ goog . events . listen = function ( src , type , listener , opt_capt , opt_handler ) {} let container = goog . dom . getElement ( container ); goog . events . listen ( container , goog . events . EventType . CLICK , function ( e ) { // ... } ); goog . events . listen ( container , [ goog . events . EventType . MOUSEOVER , goog . events . EventType . MOUSEOUT ], function ( e ) { // ... } ); /** * @constructor */ app . Foo = function () { let container = goog . dom . getElement ( container ); goog . events . listen ( container , goog . events . EventType . CLICK , this . handleClick_ , false , // capture phase (means from parent to child) this // run in THIS scope ); }; /** * @param {goog.events.Event} e * @private */ app . Foo . prototype . handleClick_ = function ( e ) { // ... }; Unlisten goog.events.unlisten /** * Removes an event listener which was added with listen(). * @param {goog.events.ListenableType} src The target to stop listening to events on. * @param {string|Array. string } type The name of the event. * @param {Function|Object} listener The listener function to remove. * @param {boolean=} opt_capt * @param {Object=} opt_handler * @return {?boolean} indicating whether the listener was there to remove. */ goog . events . unlisten = function ( src , type , listener , opt_capt , opt_handler ) {} let container = goog . dom . getElement ( container ); let clickHandler = function ( e ) { // ... }; goog . events . listen ( container , goog . events . EventType . CLICK , clickHandler ); // ... goog . events . unlisten ( container , goog . events . EventType . CLICK , clickHandler ); Event Handler goog.events.EventHandler By extending EventHandler , event handlers will have the same lifecycle as the object. (As opposed to goog.events.listen which ties event handler lifecycle to the element.) When instances of an EventHandler class are disposed, the event handlers are removed, even if the element is still present in the DOM. This approach also avoids the need for using goog.bind on the event method, or having to pass this as parameter to listen() . Do not forget to call object.dispose() for cleanup (destructing object). Dispose method will also remove all listeners. /** * Example {@code EventHandler} class. * @constructor * @extends {goog.events.EventHandler} * @final */ app . Foo = function () { app . Foo . base ( this , constructor ); let container = goog . dom . getRequiredElement ( container ); // listen for CLICK - handled by this.handleClick_ // note: this.listenOnce() is also useful. this . listen ( container , goog . events . EventType . CLICK , this . handleClick_ ); // listen for MOUSEOVER, MOUSEOUT - handled by this.handleMouseEvent_ this . listen ( container , [ goog . events . EventType . MOUSEOVER , goog . events . EventType . MOUSEOUT ], this . handleMouseEvent_ ); }; goog . inherits ( app . Foo , goog . events . EventHandler ); /** * Handles mouse being hovered over container. * @param {!goog.events.BrowserEvent} e * @private */ app . Foo . prototype . handleMouseEvent_ = function ( e ) { let type = e . type ; // e.g. goog.events.EventType.MOUSEOVER // ... }; /** * Handles container being clicked. * @param {!goog.events.BrowserEvent} e * @private */ app . Foo . prototype . handleClick_ = function ( e ) { // ... }; History let history = new goog . History (); history . setEnabled ( true ); goog . events . listen ( history , goog . history . EventType . NAVIGATE , function ( /** goog.history.Event */ e ) { // e.token // e.isNavigation // ... } ); Key Handler goog.events.KeyHandler let keyHandler = new goog . events . KeyHandler ( goog . dom . getDocument (). body ); goog . events . listen ( keyHandler , goog . events . KeyHandler . EventType . KEY , function ( e ) { // e.repeat // e.keyCode goog.events.KeyCodes // e.charCode String.fromCharCode() // e.altKey // e.shiftKey } ); More complex example /** * @constructor * @extends {goog.Disposable} */ app . Foo = function () { goog . base ( this ); this . keyHandler_ = new goog . events . KeyHandler ( goog . dom . getDocument (). body ); this . getHandler (). listen ( this . keyHandler_ , goog . events . KeyHandler . EventType . KEY , this . handleKey_ ); }; goog . inherits ( app . Foo , goog . Disposable ); /** * @type {goog.events.EventHandler} */ app . Foo . prototype . handler_ ; /** * @type {goog.events.KeyHandler} */ app . Foo . prototype . keyHandler_ ; /** * Create/return EventHandler which has default SCOPE to THIS * * @returns {goog.events.EventHandler} */ app . Foo . prototype . getHandler = function () { return this . handler_ || ( this . handler_ = new goog . events . EventHandler ( this )); }; /** * @override */ app . Foo . prototype . disposeInternal = function () { if ( this . handler_ ) { this . handler_ . dispose (); this . handler_ = null ; } if ( this . keyHandler_ ) { this . keyHandler_ . dispose (); this . keyHandler_ = null ; } goog . base ( this , disposeInternal ); }; /** * @param {goog.events.KeyEvent} e * @private */ app . Foo . prototype . handleKey_ = function ( e ) { // e.repeat // e.keyCode goog.events.KeyCodes // e.charCode String.fromCharCode() // e.altKey // e.shiftKey }; Event Use unique ID for custom event /** * @enum {string} */ app . Foo . EventType = { START : goog . events . getUniqueId ( start ), STOP : goog . events . getUniqueId ( stop ) }; Custom event /** * @param {number=} opt_start * @constructor * @extends {goog.events.Event} */ app . Foo . StartEvent = function ( opt_start ) { goog . base ( this , app . Foo . EventType . START ); if ( goog . isDef ( opt_start )) { this . start = opt_start ; } }; goog . inherits ( app . Foo . StartEvent , goog . events . Event ); /** * @type {number} */ app . Foo . StartEvent . prototype . start ; Event Target Create your own EventTarget object on which you can: listen for events dispatch events be part of structure (like a DOM) /** * @constructor * @extends {goog.events.EventTarget} */ app . EventTarget = function () { goog . base ( this ); }; goog . inherits ( app . EventTarget , goog . events . EventTarget ); let target = new app . EventTarget (); goog . events . listen ( target , custom-event , function ( e ) { // ... } ); // ... goog . events . dispatchEvent ( target , custom-event ); let parent = new app . EventTarget (); let child = new app . EventTarget (); // set parent for child, so event will bubble up (capture) to parent child . setParentEventTarget ( parent ); // listen on parent goog . events . listen ( parent , custom-event , function ( e ) { // ... } ); // ... // dispatch on child goog . events . dispatchEvent ( child , custom-event );","title":"Events"},{"location":"events/#listen","text":"","title":"Listen"},{"location":"events/#googeventslisten","text":"/** * Adds an event listener for a specific event on a DOM Node or goog.events.EventTarget * * @param {goog.events.ListenableType} src The node to listen to events on. * @param {string|Array. string } type Event type or array of event types. * @param {Function|Object} listener Callback method * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to false) * @param {Object=} opt_handler Element in whose scope to call the listener. * @return {goog.events.Key} Unique key for the listener. */ goog . events . listen = function ( src , type , listener , opt_capt , opt_handler ) {} let container = goog . dom . getElement ( container ); goog . events . listen ( container , goog . events . EventType . CLICK , function ( e ) { // ... } ); goog . events . listen ( container , [ goog . events . EventType . MOUSEOVER , goog . events . EventType . MOUSEOUT ], function ( e ) { // ... } ); /** * @constructor */ app . Foo = function () { let container = goog . dom . getElement ( container ); goog . events . listen ( container , goog . events . EventType . CLICK , this . handleClick_ , false , // capture phase (means from parent to child) this // run in THIS scope ); }; /** * @param {goog.events.Event} e * @private */ app . Foo . prototype . handleClick_ = function ( e ) { // ... };","title":"goog.events.listen"},{"location":"events/#unlisten","text":"","title":"Unlisten"},{"location":"events/#googeventsunlisten","text":"/** * Removes an event listener which was added with listen(). * @param {goog.events.ListenableType} src The target to stop listening to events on. * @param {string|Array. string } type The name of the event. * @param {Function|Object} listener The listener function to remove. * @param {boolean=} opt_capt * @param {Object=} opt_handler * @return {?boolean} indicating whether the listener was there to remove. */ goog . events . unlisten = function ( src , type , listener , opt_capt , opt_handler ) {} let container = goog . dom . getElement ( container ); let clickHandler = function ( e ) { // ... }; goog . events . listen ( container , goog . events . EventType . CLICK , clickHandler ); // ... goog . events . unlisten ( container , goog . events . EventType . CLICK , clickHandler );","title":"goog.events.unlisten"},{"location":"events/#event-handler","text":"","title":"Event Handler"},{"location":"events/#googeventseventhandler","text":"By extending EventHandler , event handlers will have the same lifecycle as the object. (As opposed to goog.events.listen which ties event handler lifecycle to the element.) When instances of an EventHandler class are disposed, the event handlers are removed, even if the element is still present in the DOM. This approach also avoids the need for using goog.bind on the event method, or having to pass this as parameter to listen() . Do not forget to call object.dispose() for cleanup (destructing object). Dispose method will also remove all listeners. /** * Example {@code EventHandler} class. * @constructor * @extends {goog.events.EventHandler} * @final */ app . Foo = function () { app . Foo . base ( this , constructor ); let container = goog . dom . getRequiredElement ( container ); // listen for CLICK - handled by this.handleClick_ // note: this.listenOnce() is also useful. this . listen ( container , goog . events . EventType . CLICK , this . handleClick_ ); // listen for MOUSEOVER, MOUSEOUT - handled by this.handleMouseEvent_ this . listen ( container , [ goog . events . EventType . MOUSEOVER , goog . events . EventType . MOUSEOUT ], this . handleMouseEvent_ ); }; goog . inherits ( app . Foo , goog . events . EventHandler ); /** * Handles mouse being hovered over container. * @param {!goog.events.BrowserEvent} e * @private */ app . Foo . prototype . handleMouseEvent_ = function ( e ) { let type = e . type ; // e.g. goog.events.EventType.MOUSEOVER // ... }; /** * Handles container being clicked. * @param {!goog.events.BrowserEvent} e * @private */ app . Foo . prototype . handleClick_ = function ( e ) { // ... };","title":"goog.events.EventHandler"},{"location":"events/#history","text":"let history = new goog . History (); history . setEnabled ( true ); goog . events . listen ( history , goog . history . EventType . NAVIGATE , function ( /** goog.history.Event */ e ) { // e.token // e.isNavigation // ... } );","title":"History"},{"location":"events/#key-handler","text":"","title":"Key Handler"},{"location":"events/#googeventskeyhandler","text":"let keyHandler = new goog . events . KeyHandler ( goog . dom . getDocument (). body ); goog . events . listen ( keyHandler , goog . events . KeyHandler . EventType . KEY , function ( e ) { // e.repeat // e.keyCode goog.events.KeyCodes // e.charCode String.fromCharCode() // e.altKey // e.shiftKey } ); More complex example /** * @constructor * @extends {goog.Disposable} */ app . Foo = function () { goog . base ( this ); this . keyHandler_ = new goog . events . KeyHandler ( goog . dom . getDocument (). body ); this . getHandler (). listen ( this . keyHandler_ , goog . events . KeyHandler . EventType . KEY , this . handleKey_ ); }; goog . inherits ( app . Foo , goog . Disposable ); /** * @type {goog.events.EventHandler} */ app . Foo . prototype . handler_ ; /** * @type {goog.events.KeyHandler} */ app . Foo . prototype . keyHandler_ ; /** * Create/return EventHandler which has default SCOPE to THIS * * @returns {goog.events.EventHandler} */ app . Foo . prototype . getHandler = function () { return this . handler_ || ( this . handler_ = new goog . events . EventHandler ( this )); }; /** * @override */ app . Foo . prototype . disposeInternal = function () { if ( this . handler_ ) { this . handler_ . dispose (); this . handler_ = null ; } if ( this . keyHandler_ ) { this . keyHandler_ . dispose (); this . keyHandler_ = null ; } goog . base ( this , disposeInternal ); }; /** * @param {goog.events.KeyEvent} e * @private */ app . Foo . prototype . handleKey_ = function ( e ) { // e.repeat // e.keyCode goog.events.KeyCodes // e.charCode String.fromCharCode() // e.altKey // e.shiftKey };","title":"goog.events.KeyHandler"},{"location":"events/#event","text":"Use unique ID for custom event /** * @enum {string} */ app . Foo . EventType = { START : goog . events . getUniqueId ( start ), STOP : goog . events . getUniqueId ( stop ) };","title":"Event"},{"location":"events/#custom-event","text":"/** * @param {number=} opt_start * @constructor * @extends {goog.events.Event} */ app . Foo . StartEvent = function ( opt_start ) { goog . base ( this , app . Foo . EventType . START ); if ( goog . isDef ( opt_start )) { this . start = opt_start ; } }; goog . inherits ( app . Foo . StartEvent , goog . events . Event ); /** * @type {number} */ app . Foo . StartEvent . prototype . start ;","title":"Custom event"},{"location":"events/#event-target","text":"Create your own EventTarget object on which you can: listen for events dispatch events be part of structure (like a DOM) /** * @constructor * @extends {goog.events.EventTarget} */ app . EventTarget = function () { goog . base ( this ); }; goog . inherits ( app . EventTarget , goog . events . EventTarget ); let target = new app . EventTarget (); goog . events . listen ( target , custom-event , function ( e ) { // ... } ); // ... goog . events . dispatchEvent ( target , custom-event ); let parent = new app . EventTarget (); let child = new app . EventTarget (); // set parent for child, so event will bubble up (capture) to parent child . setParentEventTarget ( parent ); // listen on parent goog . events . listen ( parent , custom-event , function ( e ) { // ... } ); // ... // dispatch on child goog . events . dispatchEvent ( child , custom-event );","title":"Event Target"},{"location":"i18n/","text":"goog.getMsg /** @desc Test */ let MSG_TEST = goog . getMsg ( Test ); /** * @meaning Meaning * @desc Test */ let MSG_TEST_MEANING = goog . getMsg ( Test meaning ); /** @desc Test with placeholder */ let MSG_TEST_PLACEHOLDER = goog . getMsg ( Test with {$ph} , { ph : placeholder }); goog.LOCALE af , af_ZA am , am_ET ar , ar_001 , ar_EG bg , bg_BG bn , bn_BD ca , ca_AD , ca_ES cs , cs_CZ da , da_DK de , de_AT , de_BE , de_CH , de_DE , de_LU el , el_GR en , en_AS , en_AU , en_Dsrt_US , en_FM , en_GB , en_GU , en_IE , en_IN , ... es , es_419 , es_EA , es_ES , es_IC et , et_EE eu , eu_ES fa , fa_IR fi , fi_FI fil , fil_PH fr , fr_BL , fr_CA , fr_FR , fr_GF , fr_GP , fr_MC , fr_MF , fr_MQ , fr_RE , fr_YT gl , gl_ES gsw , gsw_CH gu , gu_IN he , he_IL hi , hi_IN hr , hr_HR hu , hu_HU id , id_ID in is , is_IS it , it_IT , it_SM iw ja , ja_JP kn , kn_IN ko , ko_KR ln , ln_CD lt , lt_LT lv , lv_LV ml , ml_IN mr , mr_IN ms , ms_MY mt , mt_MT nl , nl_CW , nl_NL , nl_SX no or , or_IN pl , pl_PL pt , pt_BR , pt_PT ro , ro_RO ru , ru_RU sk , sk_SK sl , sl_SI sq , sq_AL sr , sr_Cyrl_RS , sr_Latn_RS sv , sv_SE sw , sw_TZ ta , ta_IN te , te_IN th , th_TH tl tr , tr_TR uk , uk_UA ur , ur_PK vi , vi_VN zh , zh_CN , zh_HK , zh_Hans_CN , zh_TW zu , zu_ZA development goog . LOCALE = cs ; goog . require ( /** goog.i18n. */ ); production closurebuilder.py \\ ... --output_mode = compiled \\ --compiler_flags = --define=goog.LOCALE= cs \\ ... goog.i18n.DateTimeFormat let fmt = new goog . i18n . DateTimeFormat ( goog . i18n . DateTimeFormat . Format . FULL_DATETIME ); let formattedDateTime = fmt . format ( new Date ()); // CS pond\u011bl\u00ed, 25. b\u0159ezna 2013 16:38:36 UTC+1 // EN Monday, March 25, 2013 4:38:36 PM UTC+1 goog.i18n.MessageFormat let fmt = new goog . i18n . MessageFormat ( There {EXAMPLE, select, + 0 {is no example} + 1 {is one example} + other {are many examples}} + in messageformat_test.html ); let msg = fmt . format ({ EXAMPLE : 0 }); // There is no example in messageformat_test.html let msg = fmt . format ({ EXAMPLE : 1 }); // There is one example in messageformat_test.html let msg = fmt . format ({ EXAMPLE : 2 }); // There are many examples in messageformat_test.html goog.i18n.NumberFormat let fmt = new goog . i18n . NumberFormat ( goog . i18n . NumberFormat . Format . CURRENCY ); let currency = fmt . format ( 9999.99 ); // CS currency 9 999,99 K\u010d // EN currency $9,999.99","title":"I18n"},{"location":"i18n/#googgetmsg","text":"/** @desc Test */ let MSG_TEST = goog . getMsg ( Test ); /** * @meaning Meaning * @desc Test */ let MSG_TEST_MEANING = goog . getMsg ( Test meaning ); /** @desc Test with placeholder */ let MSG_TEST_PLACEHOLDER = goog . getMsg ( Test with {$ph} , { ph : placeholder });","title":"goog.getMsg"},{"location":"i18n/#googlocale","text":"af , af_ZA am , am_ET ar , ar_001 , ar_EG bg , bg_BG bn , bn_BD ca , ca_AD , ca_ES cs , cs_CZ da , da_DK de , de_AT , de_BE , de_CH , de_DE , de_LU el , el_GR en , en_AS , en_AU , en_Dsrt_US , en_FM , en_GB , en_GU , en_IE , en_IN , ... es , es_419 , es_EA , es_ES , es_IC et , et_EE eu , eu_ES fa , fa_IR fi , fi_FI fil , fil_PH fr , fr_BL , fr_CA , fr_FR , fr_GF , fr_GP , fr_MC , fr_MF , fr_MQ , fr_RE , fr_YT gl , gl_ES gsw , gsw_CH gu , gu_IN he , he_IL hi , hi_IN hr , hr_HR hu , hu_HU id , id_ID in is , is_IS it , it_IT , it_SM iw ja , ja_JP kn , kn_IN ko , ko_KR ln , ln_CD lt , lt_LT lv , lv_LV ml , ml_IN mr , mr_IN ms , ms_MY mt , mt_MT nl , nl_CW , nl_NL , nl_SX no or , or_IN pl , pl_PL pt , pt_BR , pt_PT ro , ro_RO ru , ru_RU sk , sk_SK sl , sl_SI sq , sq_AL sr , sr_Cyrl_RS , sr_Latn_RS sv , sv_SE sw , sw_TZ ta , ta_IN te , te_IN th , th_TH tl tr , tr_TR uk , uk_UA ur , ur_PK vi , vi_VN zh , zh_CN , zh_HK , zh_Hans_CN , zh_TW zu , zu_ZA development goog . LOCALE = cs ; goog . require ( /** goog.i18n. */ ); production closurebuilder.py \\ ... --output_mode = compiled \\ --compiler_flags = --define=goog.LOCALE= cs \\ ...","title":"goog.LOCALE"},{"location":"i18n/#googi18ndatetimeformat","text":"let fmt = new goog . i18n . DateTimeFormat ( goog . i18n . DateTimeFormat . Format . FULL_DATETIME ); let formattedDateTime = fmt . format ( new Date ()); // CS pond\u011bl\u00ed, 25. b\u0159ezna 2013 16:38:36 UTC+1 // EN Monday, March 25, 2013 4:38:36 PM UTC+1","title":"goog.i18n.DateTimeFormat"},{"location":"i18n/#googi18nmessageformat","text":"let fmt = new goog . i18n . MessageFormat ( There {EXAMPLE, select, + 0 {is no example} + 1 {is one example} + other {are many examples}} + in messageformat_test.html ); let msg = fmt . format ({ EXAMPLE : 0 }); // There is no example in messageformat_test.html let msg = fmt . format ({ EXAMPLE : 1 }); // There is one example in messageformat_test.html let msg = fmt . format ({ EXAMPLE : 2 }); // There are many examples in messageformat_test.html","title":"goog.i18n.MessageFormat"},{"location":"i18n/#googi18nnumberformat","text":"let fmt = new goog . i18n . NumberFormat ( goog . i18n . NumberFormat . Format . CURRENCY ); let currency = fmt . format ( 9999.99 ); // CS currency 9 999,99 K\u010d // EN currency $9,999.99","title":"goog.i18n.NumberFormat"},{"location":"jquery/","text":"DOM :first, :last ul id = menu li Item 1 / li li Item 2 / li li Item 3 / li / ul // jQuery let firstItem = $ ( #menu li:first )[ 0 ]; let lastItem = $ ( #menu li:last )[ 0 ]; // closure let menuLi = goog . dom . getElementsByTagNameAndClass ( li , undefined , goog . dom . getElement ( menu ) ); let firstItem = menuLi [ 0 ], lastItem = menuLi [ menuLi . length - 1 ]; .prepend() ul id = menu li Item 1 / li li Item 2 / li li Item 3 / li / ul // jQuery $ ( #menu ). prepend ( li Item 0 /li ); // closure let menu = goog . dom . getElement ( menu ); let newItem = goog . dom . createDom ( li , undefined , Item 0 ); goog . dom . insertChildAt ( menu , newItem , 0 ); Event Click handler div id = container style = width: 100px; height: 100px; / div // jQuery $ ( #container ). click ( function ( e ) { // ... }); // closure goog . events . listen ( goog . dom . getElement ( container ), goog . events . EventType . CLICK , function ( e ) { // ... } );","title":"Jquery"},{"location":"jquery/#dom","text":"","title":"DOM"},{"location":"jquery/#first-last","text":"ul id = menu li Item 1 / li li Item 2 / li li Item 3 / li / ul // jQuery let firstItem = $ ( #menu li:first )[ 0 ]; let lastItem = $ ( #menu li:last )[ 0 ]; // closure let menuLi = goog . dom . getElementsByTagNameAndClass ( li , undefined , goog . dom . getElement ( menu ) ); let firstItem = menuLi [ 0 ], lastItem = menuLi [ menuLi . length - 1 ];","title":":first, :last"},{"location":"jquery/#prepend","text":"ul id = menu li Item 1 / li li Item 2 / li li Item 3 / li / ul // jQuery $ ( #menu ). prepend ( li Item 0 /li ); // closure let menu = goog . dom . getElement ( menu ); let newItem = goog . dom . createDom ( li , undefined , Item 0 ); goog . dom . insertChildAt ( menu , newItem , 0 );","title":".prepend()"},{"location":"jquery/#event","text":"","title":"Event"},{"location":"jquery/#click-handler","text":"div id = container style = width: 100px; height: 100px; / div // jQuery $ ( #container ). click ( function ( e ) { // ... }); // closure goog . events . listen ( goog . dom . getElement ( container ), goog . events . EventType . CLICK , function ( e ) { // ... } );","title":"Click handler"},{"location":"net/","text":"goog.net.XhrIo https://developers.google.com/closure/library/docs/xhrio [ goog . net . EventType . READY_STATE_CHANGE ] | [ goog . net . EventType . COMPLETE ] / \\ [ goog . net . EventType . SUCCESS ] [ goog . net . EventType . ERROR ] \\ / [ goog . net . EventType . READY ] Simple GET goog . net . XhrIo . send ( /about , function ( e ) { let xhr = /** @type {goog.net.XhrIo} */ ( e . target ); let response = xhr . getResponse (); //let jsonResponse = xhr.getResponseJson(); }); POST with query data let queryData = new goog . Uri . QueryData (); queryData . set ( param1 , value1 ); queryData . set ( param2 , value2 ); let responseHandler = function ( e ) { let xhr = /** @type {goog.net.XhrIo} */ ( e . target ); // ... }; let xhr = new goog . net . XhrIo (); goog . events . listen ( xhr , goog . net . EventType . SUCCESS , responseHandler ); xhr . send ( /about , POST , queryData . toString ()); goog.net.XhrManager [ goog . net . EventType . READY ] | [ goog . net . EventType . COMPLETE ] / \\ [ goog . net . EventType . SUCCESS ] [ goog . net . EventType . ERROR ] let xhrManager = new goog . net . XhrManager ( /** opt_maxRetries */ 0 ); goog . events . listen ( xhrManager , goog . net . EventType . SUCCESS , function ( e ) { let xhr = /** @type {goog.net.XhrIo} */ ( e . target ); // ... } ); let requestId = my-id ; // xhrManager.abort(requestId, true); xhrManager . send ( requestId , /about ); goog.net.IframeIo Very usefully for sending FORM 'behind' the scene (especially file upload). [ goog . net . EventType . COMPLETE ] / \\ [ goog . net . EventType . SUCCESS ] [ goog . net . EventType . ERROR ] \\ / [ goog . net . EventType . READY ] let iFrameIo = new goog . net . IframeIo (); let form = /** @type {HTMLFormElement} */ ( goog . dom . getElement ( form )); goog . events . listen ( iFrameIo , goog . net . EventType . SUCCESS , function ( e ) { let iFrameIo = /** @type {goog.net.IframeIo} */ ( e . target ); // iFrameIo.getResponseHtml() // iFrameIo.getResponseJson() - response Content-type: text/plain // ... } ); iFrameIo . sendFromForm ( form ); goog.net.ImageLoader [ goog . events . EventType . LOAD ] [ goog . events . EventType . ERROR ] \\ / [ goog . net . EventType . COMPLETE ] let imageLoader = new goog . net . ImageLoader (); goog . events . listen ( imageLoader , goog . events . EventType . LOAD , function ( e ) { let image = /** @type {HTMLImageElement} */ ( e . target ); // ... } ); let imageId = image-id ; let imageUrl = http://.../....jpg ; imageLoader . addImage ( imageId , imageUrl ); imageLoader . start (); Cookies goog.net.cookies.isEnabled let cookiesEnabled = goog . net . cookies . isEnabled (); // true if cookies are enabled // false if cookies are disabled goog.net.cookies.containsKey /** * Returns whether there is a cookie with the given name. * @param {string} key The name of the cookie to test for. * @return {boolean} Whether there is a cookie by that name. */ goog . net . cookies . containsKey = function ( key ) {} goog.net.cookies.get /** * Returns the value for the first cookie with the given name. * @param {string} name The name of the cookie to get. * @param {string=} opt_default If not found this is returned instead. * @return {string|undefined} */ goog . net . cookies . get = function ( name , opt_default ) {} goog.net.cookies.remove /** * Removes and expires a cookie. * @param {string} name The cookie name. * @param {string=} opt_path (the default is / ) * @param {string=} opt_domain (default is null) * @return {boolean} Whether the cookie existed before it was removed. */ goog . net . cookies . remove = function ( name , opt_path , opt_domain ) {} goog.net.cookies.set /** * @param {string} name * @param {string} value * @param {number=} opt_maxAge in seconds (from now), -1 session cookie * @param {?string=} opt_path * @param {?string=} opt_domain * @param {boolean=} opt_secure */ goog . net . cookies . set = function ( name , value , opt_maxAge , opt_path , opt_domain , opt_secure ) {} Uri goog.uri.utils.getFragment let fragment = goog . uri . utils . getFragment ( http://www.closurecheatsheet.com/about#xtb-generator ); // xtb-generator goog.uri.utils.getPath let path = goog . uri . utils . getPath ( http://www.closurecheatsheet.com/about#xtb-generator ); // /about","title":"Net"},{"location":"net/#goognetxhrio","text":"https://developers.google.com/closure/library/docs/xhrio [ goog . net . EventType . READY_STATE_CHANGE ] | [ goog . net . EventType . COMPLETE ] / \\ [ goog . net . EventType . SUCCESS ] [ goog . net . EventType . ERROR ] \\ / [ goog . net . EventType . READY ]","title":"goog.net.XhrIo"},{"location":"net/#simple-get","text":"goog . net . XhrIo . send ( /about , function ( e ) { let xhr = /** @type {goog.net.XhrIo} */ ( e . target ); let response = xhr . getResponse (); //let jsonResponse = xhr.getResponseJson(); });","title":"Simple GET"},{"location":"net/#post-with-query-data","text":"let queryData = new goog . Uri . QueryData (); queryData . set ( param1 , value1 ); queryData . set ( param2 , value2 ); let responseHandler = function ( e ) { let xhr = /** @type {goog.net.XhrIo} */ ( e . target ); // ... }; let xhr = new goog . net . XhrIo (); goog . events . listen ( xhr , goog . net . EventType . SUCCESS , responseHandler ); xhr . send ( /about , POST , queryData . toString ());","title":"POST with query data"},{"location":"net/#goognetxhrmanager","text":"[ goog . net . EventType . READY ] | [ goog . net . EventType . COMPLETE ] / \\ [ goog . net . EventType . SUCCESS ] [ goog . net . EventType . ERROR ] let xhrManager = new goog . net . XhrManager ( /** opt_maxRetries */ 0 ); goog . events . listen ( xhrManager , goog . net . EventType . SUCCESS , function ( e ) { let xhr = /** @type {goog.net.XhrIo} */ ( e . target ); // ... } ); let requestId = my-id ; // xhrManager.abort(requestId, true); xhrManager . send ( requestId , /about );","title":"goog.net.XhrManager"},{"location":"net/#goognetiframeio","text":"Very usefully for sending FORM 'behind' the scene (especially file upload). [ goog . net . EventType . COMPLETE ] / \\ [ goog . net . EventType . SUCCESS ] [ goog . net . EventType . ERROR ] \\ / [ goog . net . EventType . READY ] let iFrameIo = new goog . net . IframeIo (); let form = /** @type {HTMLFormElement} */ ( goog . dom . getElement ( form )); goog . events . listen ( iFrameIo , goog . net . EventType . SUCCESS , function ( e ) { let iFrameIo = /** @type {goog.net.IframeIo} */ ( e . target ); // iFrameIo.getResponseHtml() // iFrameIo.getResponseJson() - response Content-type: text/plain // ... } ); iFrameIo . sendFromForm ( form );","title":"goog.net.IframeIo"},{"location":"net/#goognetimageloader","text":"[ goog . events . EventType . LOAD ] [ goog . events . EventType . ERROR ] \\ / [ goog . net . EventType . COMPLETE ] let imageLoader = new goog . net . ImageLoader (); goog . events . listen ( imageLoader , goog . events . EventType . LOAD , function ( e ) { let image = /** @type {HTMLImageElement} */ ( e . target ); // ... } ); let imageId = image-id ; let imageUrl = http://.../....jpg ; imageLoader . addImage ( imageId , imageUrl ); imageLoader . start ();","title":"goog.net.ImageLoader"},{"location":"net/#cookies","text":"","title":"Cookies"},{"location":"net/#goognetcookiesisenabled","text":"let cookiesEnabled = goog . net . cookies . isEnabled (); // true if cookies are enabled // false if cookies are disabled","title":"goog.net.cookies.isEnabled"},{"location":"net/#goognetcookiescontainskey","text":"/** * Returns whether there is a cookie with the given name. * @param {string} key The name of the cookie to test for. * @return {boolean} Whether there is a cookie by that name. */ goog . net . cookies . containsKey = function ( key ) {}","title":"goog.net.cookies.containsKey"},{"location":"net/#goognetcookiesget","text":"/** * Returns the value for the first cookie with the given name. * @param {string} name The name of the cookie to get. * @param {string=} opt_default If not found this is returned instead. * @return {string|undefined} */ goog . net . cookies . get = function ( name , opt_default ) {}","title":"goog.net.cookies.get"},{"location":"net/#goognetcookiesremove","text":"/** * Removes and expires a cookie. * @param {string} name The cookie name. * @param {string=} opt_path (the default is / ) * @param {string=} opt_domain (default is null) * @return {boolean} Whether the cookie existed before it was removed. */ goog . net . cookies . remove = function ( name , opt_path , opt_domain ) {}","title":"goog.net.cookies.remove"},{"location":"net/#goognetcookiesset","text":"/** * @param {string} name * @param {string} value * @param {number=} opt_maxAge in seconds (from now), -1 session cookie * @param {?string=} opt_path * @param {?string=} opt_domain * @param {boolean=} opt_secure */ goog . net . cookies . set = function ( name , value , opt_maxAge , opt_path , opt_domain , opt_secure ) {}","title":"goog.net.cookies.set"},{"location":"net/#uri","text":"","title":"Uri"},{"location":"net/#googuriutilsgetfragment","text":"let fragment = goog . uri . utils . getFragment ( http://www.closurecheatsheet.com/about#xtb-generator ); // xtb-generator","title":"goog.uri.utils.getFragment"},{"location":"net/#googuriutilsgetpath","text":"let path = goog . uri . utils . getPath ( http://www.closurecheatsheet.com/about#xtb-generator ); // /about","title":"goog.uri.utils.getPath"},{"location":"oop/","text":"Inheritance /** * @param {string} foo * @constructor */ app . Parent = function ( foo ) { this . foo = foo ; }; /** * @type {string} */ app . Parent . prototype . foo ; /** * @param {string} param */ app . Parent . prototype . doSomething = function ( param ) { // ... }; /** * @param {string} foo * @param {string} bar * @constructor * @extends {app.Parent} */ app . Child = function ( foo , bar ) { app . Child . base ( this , constructor , foo ); // call parent constructor this . bar = bar ; }; goog . inherits ( app . Child , app . Parent ); /** * @type {string} */ app . Child . prototype . bar ; /** * @override */ app . Child . prototype . doSomething = function ( param ) { app . Child . base ( this , doSomething , param ); // call super doSomething // ... }; Singleton /** * @constructor */ app . Foo = function () { }; goog . addSingletonGetter ( app . Foo ); let fooInstance = /** @type {app.Foo} */ ( app . Foo . getInstance ()); Mixin /** * @constructor */ app . Mixin = function () {}; /** * */ app . Mixin . prototype . mixinFunction = function () { }; /** * @constructor */ app . Foo = function () { }; /** * */ app . Foo . prototype . fooFunction = function () { }; goog . mixin ( app . Foo . prototype , app . Mixin . prototype ); let foo = new app . Foo (); foo . fooFunction (); foo . mixinFunction (); Abstract, Interface /** * Abstract object * * @constructor */ app . AParent = function () { }; /** * This function must be implemented in child */ app . AParent . prototype . someFunction = goog . abstractMethod ; /** * Interface * * @interface */ app . Interface = function () {}; /** * Interface function */ app . Interface . prototype . interfaceFunction ; /** * Child which extends abstract object and implements interface * * @constructor * @extends {app.AParent} * @implements {app.Interface} */ app . Child = function () { app . Child . base ( this , constructor ); }; goog . inherits ( app . Child , app . AParent ) /** * @override */ app . Child . prototype . someFunction = function () { // ... }; /** * @override */ app . Child . prototype . interfaceFunction = function () { // ... }; Disposable /** * @constructor * @extends {goog.Disposable} */ app . Foo = function () { app . Foo . base ( this , constructor ); // non-disposable object (NOT @extends goog.Disposable) this . element = goog . dom . getElement ( bar ); this . button = goog . dom . createDom ( goog . dom . TagName . BUTTON ); // disposable objects (@extends goog.Disposable) this . handler = new goog . events . EventHandler ( this ); // register for dispose in disposeInternal() // Alternatively: Call goog.dispose(this.handler) in disposeInternal(). this . registerDisposable ( this . handler ); }; goog . inherits ( app . Foo , goog . Disposable ); /** * Reference to DOM object * * @type {Element} */ app . Foo . prototype . element ; /** * Reference to DOM object * * @type {!Element} */ app . Foo . prototype . button ; /** * Another disposable object * * @type {goog.events.EventHandler} */ app . Foo . prototype . handler ; /** * Clean/dispose all object, references, ... * * @override */ app . Foo . prototype . disposeInternal = function () { // cleanup this . element = null ; // Preferred for nullable fields (faster). delete this . button ; // Necessary for non-null fields. this . handler = null ; // dispose all disposable object registered as this.registerDisposable() app . Foo . base ( this , disposeInternal ); }; let a = new app . Foo (); // ... a . dispose (); // Alternatively: goog.dispose(a); which permits null/undefined. Monitoring disposable object // set monitoring mode goog . Disposable . MONITORING_MODE = goog . Disposable . MonitoringMode . PERMANENT ; //goog.Disposable.MONITORING_MODE = goog.Disposable.MonitoringMode.INTERACTIVE; // get array of undisposed objects console . log ( goog . Disposable . getUndisposedObjects ());","title":"Oop"},{"location":"oop/#inheritance","text":"/** * @param {string} foo * @constructor */ app . Parent = function ( foo ) { this . foo = foo ; }; /** * @type {string} */ app . Parent . prototype . foo ; /** * @param {string} param */ app . Parent . prototype . doSomething = function ( param ) { // ... }; /** * @param {string} foo * @param {string} bar * @constructor * @extends {app.Parent} */ app . Child = function ( foo , bar ) { app . Child . base ( this , constructor , foo ); // call parent constructor this . bar = bar ; }; goog . inherits ( app . Child , app . Parent ); /** * @type {string} */ app . Child . prototype . bar ; /** * @override */ app . Child . prototype . doSomething = function ( param ) { app . Child . base ( this , doSomething , param ); // call super doSomething // ... };","title":"Inheritance"},{"location":"oop/#singleton","text":"/** * @constructor */ app . Foo = function () { }; goog . addSingletonGetter ( app . Foo ); let fooInstance = /** @type {app.Foo} */ ( app . Foo . getInstance ());","title":"Singleton"},{"location":"oop/#mixin","text":"/** * @constructor */ app . Mixin = function () {}; /** * */ app . Mixin . prototype . mixinFunction = function () { }; /** * @constructor */ app . Foo = function () { }; /** * */ app . Foo . prototype . fooFunction = function () { }; goog . mixin ( app . Foo . prototype , app . Mixin . prototype ); let foo = new app . Foo (); foo . fooFunction (); foo . mixinFunction ();","title":"Mixin"},{"location":"oop/#abstract-interface","text":"/** * Abstract object * * @constructor */ app . AParent = function () { }; /** * This function must be implemented in child */ app . AParent . prototype . someFunction = goog . abstractMethod ; /** * Interface * * @interface */ app . Interface = function () {}; /** * Interface function */ app . Interface . prototype . interfaceFunction ; /** * Child which extends abstract object and implements interface * * @constructor * @extends {app.AParent} * @implements {app.Interface} */ app . Child = function () { app . Child . base ( this , constructor ); }; goog . inherits ( app . Child , app . AParent ) /** * @override */ app . Child . prototype . someFunction = function () { // ... }; /** * @override */ app . Child . prototype . interfaceFunction = function () { // ... };","title":"Abstract, Interface"},{"location":"oop/#disposable","text":"/** * @constructor * @extends {goog.Disposable} */ app . Foo = function () { app . Foo . base ( this , constructor ); // non-disposable object (NOT @extends goog.Disposable) this . element = goog . dom . getElement ( bar ); this . button = goog . dom . createDom ( goog . dom . TagName . BUTTON ); // disposable objects (@extends goog.Disposable) this . handler = new goog . events . EventHandler ( this ); // register for dispose in disposeInternal() // Alternatively: Call goog.dispose(this.handler) in disposeInternal(). this . registerDisposable ( this . handler ); }; goog . inherits ( app . Foo , goog . Disposable ); /** * Reference to DOM object * * @type {Element} */ app . Foo . prototype . element ; /** * Reference to DOM object * * @type {!Element} */ app . Foo . prototype . button ; /** * Another disposable object * * @type {goog.events.EventHandler} */ app . Foo . prototype . handler ; /** * Clean/dispose all object, references, ... * * @override */ app . Foo . prototype . disposeInternal = function () { // cleanup this . element = null ; // Preferred for nullable fields (faster). delete this . button ; // Necessary for non-null fields. this . handler = null ; // dispose all disposable object registered as this.registerDisposable() app . Foo . base ( this , disposeInternal ); }; let a = new app . Foo (); // ... a . dispose (); // Alternatively: goog.dispose(a); which permits null/undefined. Monitoring disposable object // set monitoring mode goog . Disposable . MONITORING_MODE = goog . Disposable . MonitoringMode . PERMANENT ; //goog.Disposable.MONITORING_MODE = goog.Disposable.MonitoringMode.INTERACTIVE; // get array of undisposed objects console . log ( goog . Disposable . getUndisposedObjects ());","title":"Disposable"},{"location":"other/","text":"goog.array goog.array.forEach app . Foo = function () { let dataToAdd = [ 1 , 2 , 3 ]; this . bar = 0 ; goog . array . forEach ( dataToAdd , function ( item ) { this . bar += item ; }, this ); // this.bar 6 }; /** * @type {number} */ app . Foo . prototype . bar ; goog.is... // @return true/false goog . isArrayLike ( val ); goog . isDef ( val ); goog . isDefAndNotNull ( val ); goog . isNull ( val ); goog . isNumber ( val ); goog . isFunction ( val ); goog . isObject ( val ); goog . isString ( val ); goog.json goog.json.parse /** * Safe parse * * @param {*} s The JSON string to parse. * @return {Object} The object generated from the JSON string. */ goog . json . parse = function ( s ) {} goog.json.serialize /** * Serializes an object or a value to a JSON string. * * @param {*} object The object to serialize. * @param {?goog.json.Replacer=} opt_replacer * @throws Error if there are loops in the object graph. * @return {string} A JSON string representation of the input. */ goog . json . serialize = function ( object , opt_replacer ) {} goog.json.unsafeParse /** * @param {string} s The JSON string to parse. * @return {Object} The object generated from the JSON string. */ goog . json . unsafeParse = function ( s ) {} goog.object goog.object.getValues let obj = { key1 : value1 , key2 : value2 }; let arr = goog . object . getValues ( obj ); // [ value1 , value2 ] goog.object.setIfUndefined let obj = { key1 : value1 , key2 : value2 }; let set1 = goog . object . setIfUndefined ( obj , key1 , value11111 ); // value1 let set2 = goog . object . setIfUndefined ( obj , key3 , value3 ); // value3 // obj {key1: value1 , key2: value2 , key3: value3 } goog.string goog.string.padNumber goog . string . padNumber ( 1.5 , 2 , 2 )); // 01.50 goog . string . padNumber ( 1.5 , 2 , 0 )); // 02 goog.string.trim goog . string . trim ( string-to-trim ); // string-to-trim goog.string.htmlEscape goog . string . htmlEscape ( a href= href Link /a // lt;a href= quot;href quot; gt;Link lt;/a gt; ); goog.string.regExpEscape goog . string . regExpEscape ( Strange (character) ); // Strange \\(character\\) goog.string.whitespaceEscape goog . string . whitespaceEscape ( Text\\nwith whitespace , // Text br / with nbsp;whitespace true ); goog.userAgent if ( goog . userAgent . IE ) { // run away }; /** * Condition will be true for IE 9.0 * @see goog.string.compareVersions */ if ( goog . userAgent . IE goog . userAgent . compare ( 9 , goog . userAgent . VERSION ) == 1 ) { // run away even faster } /** * Condition will be true for IE = 10.0 */ if ( goog . userAgent . IE goog . userAgent . isVersionOrHigher ( 10 )) { // ... } goog.typeOf let a = ...; goog . typeOf ( a ); // array , object , function , null , string , number , boolean , undefined","title":"Other"},{"location":"other/#googarray","text":"","title":"goog.array"},{"location":"other/#googarrayforeach","text":"app . Foo = function () { let dataToAdd = [ 1 , 2 , 3 ]; this . bar = 0 ; goog . array . forEach ( dataToAdd , function ( item ) { this . bar += item ; }, this ); // this.bar 6 }; /** * @type {number} */ app . Foo . prototype . bar ;","title":"goog.array.forEach"},{"location":"other/#googis","text":"// @return true/false goog . isArrayLike ( val ); goog . isDef ( val ); goog . isDefAndNotNull ( val ); goog . isNull ( val ); goog . isNumber ( val ); goog . isFunction ( val ); goog . isObject ( val ); goog . isString ( val );","title":"goog.is..."},{"location":"other/#googjson","text":"","title":"goog.json"},{"location":"other/#googjsonparse","text":"/** * Safe parse * * @param {*} s The JSON string to parse. * @return {Object} The object generated from the JSON string. */ goog . json . parse = function ( s ) {}","title":"goog.json.parse"},{"location":"other/#googjsonserialize","text":"/** * Serializes an object or a value to a JSON string. * * @param {*} object The object to serialize. * @param {?goog.json.Replacer=} opt_replacer * @throws Error if there are loops in the object graph. * @return {string} A JSON string representation of the input. */ goog . json . serialize = function ( object , opt_replacer ) {}","title":"goog.json.serialize"},{"location":"other/#googjsonunsafeparse","text":"/** * @param {string} s The JSON string to parse. * @return {Object} The object generated from the JSON string. */ goog . json . unsafeParse = function ( s ) {}","title":"goog.json.unsafeParse"},{"location":"other/#googobject","text":"","title":"goog.object"},{"location":"other/#googobjectgetvalues","text":"let obj = { key1 : value1 , key2 : value2 }; let arr = goog . object . getValues ( obj ); // [ value1 , value2 ]","title":"goog.object.getValues"},{"location":"other/#googobjectsetifundefined","text":"let obj = { key1 : value1 , key2 : value2 }; let set1 = goog . object . setIfUndefined ( obj , key1 , value11111 ); // value1 let set2 = goog . object . setIfUndefined ( obj , key3 , value3 ); // value3 // obj {key1: value1 , key2: value2 , key3: value3 }","title":"goog.object.setIfUndefined"},{"location":"other/#googstring","text":"","title":"goog.string"},{"location":"other/#googstringpadnumber","text":"goog . string . padNumber ( 1.5 , 2 , 2 )); // 01.50 goog . string . padNumber ( 1.5 , 2 , 0 )); // 02","title":"goog.string.padNumber"},{"location":"other/#googstringtrim","text":"goog . string . trim ( string-to-trim ); // string-to-trim goog.string.htmlEscape goog . string . htmlEscape ( a href= href Link /a // lt;a href= quot;href quot; gt;Link lt;/a gt; );","title":"goog.string.trim"},{"location":"other/#googstringregexpescape","text":"goog . string . regExpEscape ( Strange (character) ); // Strange \\(character\\)","title":"goog.string.regExpEscape"},{"location":"other/#googstringwhitespaceescape","text":"goog . string . whitespaceEscape ( Text\\nwith whitespace , // Text br / with nbsp;whitespace true );","title":"goog.string.whitespaceEscape"},{"location":"other/#googuseragent","text":"if ( goog . userAgent . IE ) { // run away }; /** * Condition will be true for IE 9.0 * @see goog.string.compareVersions */ if ( goog . userAgent . IE goog . userAgent . compare ( 9 , goog . userAgent . VERSION ) == 1 ) { // run away even faster } /** * Condition will be true for IE = 10.0 */ if ( goog . userAgent . IE goog . userAgent . isVersionOrHigher ( 10 )) { // ... }","title":"goog.userAgent"},{"location":"other/#googtypeof","text":"let a = ...; goog . typeOf ( a ); // array , object , function , null , string , number , boolean , undefined","title":"goog.typeOf"},{"location":"skeleton/","text":"Basic Directory structure . \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 closure ( SoyToJsSrcCompiler . jar , XtbGenerator . jar , compiler . jar ) \u2502 \u2514\u2500\u2500 www \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 DIRECTORY_1 ( example application directory ) \u2502 \u251c\u2500\u2500 DIRECTORY_2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 app . js ( application entry point ) \u2502 \u2514\u2500\u2500 ... ( app - compiled . js , app - deps . js , app - messages . js ) \u2502 \u251c\u2500\u2500 js - closure ( cloned closure GIT repository ) \u2502 \u2514\u2500\u2500 closure \u2502 \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 goog \u2502 \u251c\u2500\u2500 js - externs \u2502 \u251c\u2500\u2500 js - soy ( soyutils_usegoog . js ) \u2502 \u2514\u2500\u2500 index . html BASH variables Relative to ./bin directory PYTHON_BIN = python JVM_ARCH = -d64 CLOSURE_BUILD_DIR = ../www/js-closure/closure/bin/build CLOSURE_UTIL_DIR = closure JS_APP_DIR = ../www/js JS_APP_INPUT = ../www/js/app.js JS_APP_COMPILED = ../www/js/app-compiled.js JS_APP_DEPS = ../www/js/app-deps.js JS_APP_MESSAGES = ../www/js/app-messages.xtb JS_CLOSURE_LIB_DIR = ../www/js-closure/closure/goog JS_CLOSURE_THIRD_PARTY_DIR = ../www/js-closure/third_party/closure/goog JS_CLOSURE_SOY_DIR = ../www/js-soy TEMPLATE_DIR = ../www/js URL_APP = ../../../js URL_SOY = ../../../js-soy LANG = cs LOCALE = cs_CZ index-devel.html !doctype html html head script src = /js-closure/closure/goog/base.js / script script src = /js/app-deps.js / script script goog . require ( app.start ); / script / head body !-- HTML CONTENT -- script app . start (); / script / body / html index-prod.html !doctype html html head script src = /js/app-compiled.js / script / head body !-- HTML CONTENT -- script app . start (); / script / body / html Deps Scan and generate ./www/js/app-deps.js (dependencies) based on goog.provide() and goog.require() ${ PYTHON_BIN } ${ CLOSURE_BUILD_DIR } /depswriter.py \\ --root_with_prefix = ${ JS_APP_DIR } ${ URL_APP } \\ --root_with_prefix = ${ JS_CLOSURE_SOY_DIR } ${ URL_SOY } \\ --output_file = ${ JS_APP_DEPS } Templates (soy) Find all templates *.soy and compile it to JS source. java -jar ${ CLOSURE_UTIL_DIR } /SoyToJsSrcCompiler.jar \\ --outputPathFormat { INPUT_DIRECTORY } / { INPUT_FILE_NAME } .js \\ --shouldGenerateJsdoc \\ --shouldProvideRequireSoyNamespaces \\ --shouldGenerateGoogMsgDefs \\ --bidiGlobalDir 1 \\ --srcs $( find ${ TEMPLATE_DIR } -iname *.soy -type f -print0 | xargs -0 echo ) Messages Generate XTB translation file ./www/js/app-messages.xtb ${ PYTHON_BIN } ${ CLOSURE_BUILD_DIR } /closurebuilder.py \\ --root = ${ JS_APP_DIR } \\ --root = ${ JS_CLOSURE_LIB_DIR } \\ --root = ${ JS_CLOSURE_THIRD_PARTY_DIR } \\ --root = ${ JS_CLOSURE_SOY_DIR } \\ --input = ${ JS_APP_INPUT } \\ --output_mode = compiled \\ --compiler_jar = ${ CLOSURE_UTIL_DIR } /XtbGenerator.jar \\ --jvm_flags = ${ JVM_ARCH } \\ --compiler_flags = --translations_file= ${ JS_APP_MESSAGES } \\ --compiler_flags = --xtb_output_file= ${ JS_APP_MESSAGES } \\ --compiler_flags = --lang= ${ LANG } Compile Compile application into ./www/js/app-compiled/js ${ PYTHON_BIN } ${ CLOSURE_BUILD_DIR } /closurebuilder.py \\ --root = ${ JS_APP_DIR } \\ --root = ${ JS_CLOSURE_LIB_DIR } \\ --root = ${ JS_CLOSURE_THIRD_PARTY_DIR } \\ --root = ${ JS_CLOSURE_SOY_DIR } \\ --input = ${ JS_APP_INPUT } \\ --output_mode = compiled \\ --compiler_jar = ${ CLOSURE_UTIL_DIR } /compiler.jar \\ --jvm_flags = ${ JVM_ARCH } \\ --compiler_flags = --compilation_level=ADVANCED_OPTIMIZATIONS \\ --compiler_flags = --warning_level=verbose \\ --compiler_flags = --define=goog.DEBUG=false \\ --compiler_flags = --define=goog.LOCALE= ${ LOCALE } \\ --output_file = ${ JS_APP_COMPILED } Externs If you are using another JS lib in your application, you need to provide externs option to compiler. The file must contain annotation definition for each function, object, ... ${ PYTHON_BIN } ${ CLOSURE_BUILD_DIR } /closurebuilder.py \\ ... --output_mode = compiled \\ --compiler_jar = ${ CLOSURE_UTIL_DIR } /compiler.jar \\ --compiler_flags = --externs= ${ EXTERNS_DIR } /externs.js ... Mostly used externs is already on compiler externs Source map Generating source map (for debugging compiled application) ${ PYTHON_BIN } ${ CLOSURE_BUILD_DIR } /closurebuilder.py \\ ... --output_mode = compiled \\ --compiler_jar = ${ CLOSURE_UTIL_DIR } /compiler.jar \\ --compiler_flags = --create_source_map=../www/js/source.map \\ ... Add comment to end of ./www/js/app-compiled.js //@ sourceMappingURL=/js/source.map And fix path in source map (replace ../www/ to / ) %s/.. \\/ www \\/ / \\/ /g Basic example Complete skeleton/example: Download closure-example-bash.tar.gz Add Closure Library into www/js-closure (e.g.: run git clone https://github.com/google/closure-library.git www/js-closure ) Development: # compile SOY templates - when you change SOY template ./bin/build.sh soy # generate JS dependencies - when you add/change goog.require or goog.provide ./bin/build.sh deps # generate messages - when you add/change goog.getMsg ./bin/build.sh messages Production: # compile application - js/app-compiled.js ./bin/build.sh build","title":"Skeleton"},{"location":"skeleton/#basic","text":"","title":"Basic"},{"location":"skeleton/#directory-structure","text":". \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 closure ( SoyToJsSrcCompiler . jar , XtbGenerator . jar , compiler . jar ) \u2502 \u2514\u2500\u2500 www \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 DIRECTORY_1 ( example application directory ) \u2502 \u251c\u2500\u2500 DIRECTORY_2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 app . js ( application entry point ) \u2502 \u2514\u2500\u2500 ... ( app - compiled . js , app - deps . js , app - messages . js ) \u2502 \u251c\u2500\u2500 js - closure ( cloned closure GIT repository ) \u2502 \u2514\u2500\u2500 closure \u2502 \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 goog \u2502 \u251c\u2500\u2500 js - externs \u2502 \u251c\u2500\u2500 js - soy ( soyutils_usegoog . js ) \u2502 \u2514\u2500\u2500 index . html","title":"Directory structure"},{"location":"skeleton/#bash-variables","text":"Relative to ./bin directory PYTHON_BIN = python JVM_ARCH = -d64 CLOSURE_BUILD_DIR = ../www/js-closure/closure/bin/build CLOSURE_UTIL_DIR = closure JS_APP_DIR = ../www/js JS_APP_INPUT = ../www/js/app.js JS_APP_COMPILED = ../www/js/app-compiled.js JS_APP_DEPS = ../www/js/app-deps.js JS_APP_MESSAGES = ../www/js/app-messages.xtb JS_CLOSURE_LIB_DIR = ../www/js-closure/closure/goog JS_CLOSURE_THIRD_PARTY_DIR = ../www/js-closure/third_party/closure/goog JS_CLOSURE_SOY_DIR = ../www/js-soy TEMPLATE_DIR = ../www/js URL_APP = ../../../js URL_SOY = ../../../js-soy LANG = cs LOCALE = cs_CZ","title":"BASH variables"},{"location":"skeleton/#index-develhtml","text":"!doctype html html head script src = /js-closure/closure/goog/base.js / script script src = /js/app-deps.js / script script goog . require ( app.start ); / script / head body !-- HTML CONTENT -- script app . start (); / script / body / html","title":"index-devel.html"},{"location":"skeleton/#index-prodhtml","text":"!doctype html html head script src = /js/app-compiled.js / script / head body !-- HTML CONTENT -- script app . start (); / script / body / html","title":"index-prod.html"},{"location":"skeleton/#deps","text":"Scan and generate ./www/js/app-deps.js (dependencies) based on goog.provide() and goog.require() ${ PYTHON_BIN } ${ CLOSURE_BUILD_DIR } /depswriter.py \\ --root_with_prefix = ${ JS_APP_DIR } ${ URL_APP } \\ --root_with_prefix = ${ JS_CLOSURE_SOY_DIR } ${ URL_SOY } \\ --output_file = ${ JS_APP_DEPS }","title":"Deps"},{"location":"skeleton/#templates-soy","text":"Find all templates *.soy and compile it to JS source. java -jar ${ CLOSURE_UTIL_DIR } /SoyToJsSrcCompiler.jar \\ --outputPathFormat { INPUT_DIRECTORY } / { INPUT_FILE_NAME } .js \\ --shouldGenerateJsdoc \\ --shouldProvideRequireSoyNamespaces \\ --shouldGenerateGoogMsgDefs \\ --bidiGlobalDir 1 \\ --srcs $( find ${ TEMPLATE_DIR } -iname *.soy -type f -print0 | xargs -0 echo )","title":"Templates (soy)"},{"location":"skeleton/#messages","text":"Generate XTB translation file ./www/js/app-messages.xtb ${ PYTHON_BIN } ${ CLOSURE_BUILD_DIR } /closurebuilder.py \\ --root = ${ JS_APP_DIR } \\ --root = ${ JS_CLOSURE_LIB_DIR } \\ --root = ${ JS_CLOSURE_THIRD_PARTY_DIR } \\ --root = ${ JS_CLOSURE_SOY_DIR } \\ --input = ${ JS_APP_INPUT } \\ --output_mode = compiled \\ --compiler_jar = ${ CLOSURE_UTIL_DIR } /XtbGenerator.jar \\ --jvm_flags = ${ JVM_ARCH } \\ --compiler_flags = --translations_file= ${ JS_APP_MESSAGES } \\ --compiler_flags = --xtb_output_file= ${ JS_APP_MESSAGES } \\ --compiler_flags = --lang= ${ LANG }","title":"Messages"},{"location":"skeleton/#compile","text":"Compile application into ./www/js/app-compiled/js ${ PYTHON_BIN } ${ CLOSURE_BUILD_DIR } /closurebuilder.py \\ --root = ${ JS_APP_DIR } \\ --root = ${ JS_CLOSURE_LIB_DIR } \\ --root = ${ JS_CLOSURE_THIRD_PARTY_DIR } \\ --root = ${ JS_CLOSURE_SOY_DIR } \\ --input = ${ JS_APP_INPUT } \\ --output_mode = compiled \\ --compiler_jar = ${ CLOSURE_UTIL_DIR } /compiler.jar \\ --jvm_flags = ${ JVM_ARCH } \\ --compiler_flags = --compilation_level=ADVANCED_OPTIMIZATIONS \\ --compiler_flags = --warning_level=verbose \\ --compiler_flags = --define=goog.DEBUG=false \\ --compiler_flags = --define=goog.LOCALE= ${ LOCALE } \\ --output_file = ${ JS_APP_COMPILED }","title":"Compile"},{"location":"skeleton/#externs","text":"If you are using another JS lib in your application, you need to provide externs option to compiler. The file must contain annotation definition for each function, object, ... ${ PYTHON_BIN } ${ CLOSURE_BUILD_DIR } /closurebuilder.py \\ ... --output_mode = compiled \\ --compiler_jar = ${ CLOSURE_UTIL_DIR } /compiler.jar \\ --compiler_flags = --externs= ${ EXTERNS_DIR } /externs.js ... Mostly used externs is already on compiler externs","title":"Externs"},{"location":"skeleton/#source-map","text":"Generating source map (for debugging compiled application) ${ PYTHON_BIN } ${ CLOSURE_BUILD_DIR } /closurebuilder.py \\ ... --output_mode = compiled \\ --compiler_jar = ${ CLOSURE_UTIL_DIR } /compiler.jar \\ --compiler_flags = --create_source_map=../www/js/source.map \\ ... Add comment to end of ./www/js/app-compiled.js //@ sourceMappingURL=/js/source.map And fix path in source map (replace ../www/ to / ) %s/.. \\/ www \\/ / \\/ /g","title":"Source map"},{"location":"skeleton/#basic-example","text":"Complete skeleton/example: Download closure-example-bash.tar.gz Add Closure Library into www/js-closure (e.g.: run git clone https://github.com/google/closure-library.git www/js-closure ) Development: # compile SOY templates - when you change SOY template ./bin/build.sh soy # generate JS dependencies - when you add/change goog.require or goog.provide ./bin/build.sh deps # generate messages - when you add/change goog.getMsg ./bin/build.sh messages Production: # compile application - js/app-compiled.js ./bin/build.sh build","title":"Basic example"},{"location":"templates/","text":"Soy https://developers.google.com/closure/templates/docs/concepts https://developers.google.com/closure/templates/docs/commands https://github.com/google/closure-templates/tree/master/examples/simple.soy https://github.com/google/closure-templates/tree/master/examples/features.soy Basic {namespace app.template} /** * DOC */ {template .test} {@param p1: string} {@param p2: string} div {$p1} /div // one line comment div {$p2} /div /* block comment */ {/template} Character commands /** * Character commands */ { template . test } { sp } = space { nil } = empty string {\\ n } = newline ( line feed ) {\\ r } = carriage return {\\ t } = tab { lb } = left brace { rb } = right brace { / template } /** * RAW text example */ { template . test } { literal } RAW text ... preformatted { / literal } { / template } Commands { print ...} {...} // implied print command { css ...} { let ... / } { let ...}...{ / let } { if ...}...{ elseif ...}...{ else ...}...{ / if } { switch ...}{ case ...}...{ default }...{ / switch } { foreach ...}...{ ifempty }...{ / foreach } { for ...}...{ / for } { call ... / } { delcall ... / } { call ...}{ param ... / }{ param ...}...{ / param }{ / call } { delcall ...}{ param ... / }{ param ...}...{ / param }{ / delcall } { log }...{ / log } { debugger } { msg ...}...{ / msg } /** * LET example */ { template . test } { let $a } 10 { / let } { let $b : 10 / } Value for a = { $a } Value for b = { $b } { / template } /** * LOG example - `window.console.log(...);` */ {template .test} {@param p1: number} div ... /div {log}Value of p1 = {$p1}{/log} {/template} /** * DEBUGGER example - `debugger;` */ { template . test } { if ...} { debugger } { / if } { / template } Directive (helpers) /** * Soy Directives. */ { template . test } { @param p1 : any } {$ p1 | noAutoescape } {$ p1 | escapeCssString } {$ p1 | filterCssValue } {$ p1 | cleanHtml } {$ p1 | escapeHtmlRcdata } {$ p1 | escapeHtmlAttribute } {$ p1 | escapeHtmlAttributeNospace } {$ p1 | filterHtmlAttributes } {$ p1 | filterHtmlElementName } {$ p1 | escapeJsRegex } {$ p1 | escapeJsString } {$ p1 | escapeJsValue } {$ p1 | filterNormalizeUri } {$ p1 | normalizeUri } {$ p1 | escapeUri } {$ p1 | changeNewlineToBr } {$ p1 | insertWordBreaks : 1 } {$ p1 | truncate : 1 , false } { / template } /** * Assume p1 = div content /div */ { template . test } { @ param p1 : html } {$ p1 | cleanHtml } // shows only `content` { / template } /** * Assume p1 = Test value */ { template . test } { @ param p1 : string } {$ p1 | truncate : 4 , false } // shows `Test` {$ p1 | truncate : 4 , true } // shows `T...` { / template } Function /** * Soy Functions */ { template . test } { @param p1 : any } /** Dummy example parameter. */ { @param p2 : any } /** Dummy example parameter. */ { augmentMap ( $ p1 , $ p2 ) } { ceiling ( $ p1 ) } { floor ( $ p1 ) } { isNonnull ( $ p1 ) } { keys ( $ p1 ) } { length ( $ p1 ) } { max ( $ p1 , $ p2 ) } { min ( $ p1 , $ p2 ) } { randomInt ( $ p1 ) } { round ( $ p1 ) } { strContains ( $ p1 , $ p2 ) } { / template } i18n /** * MSG-PLURAL example - `goog.getMsg`, `goog.i18n.MessageFormat()` */ { template . test } {@ param p1 : int } { msg desc = Test message } { plural $ p1 } { case 1 } Message if p1 = 1 { case 2 } Message if p1 = 2 { default } Message for all other cases { / plural } { / msg } { / template } /** * MSG-SELECT example - `goog.getMsg`, goog.i18n.MessageFormat()` */ { template . test } {@ param p1 : string } { msg desc = Test message } { select $ p1 } { case male } Message for male { case female } Message for female { default } Message for all other cases { / select } { / msg } { / template } Call function outside SOY goog . provide ( app.helpers ); /** * @param {Object. string, * =} opt_data * @param {(null|undefined)=} opt_ignored * @return {string} * @notypecheck */ app . helpers . sum = function ( opt_data , opt_ignored ) { return + ( opt_data . first + opt_data . second ); }; {namespace app.templates} /** * Calling function outside SOY */ {template .test} {@param first: number} {@param second: number} div Sum em {$first} /em and em {$second} /em is{sp} strong {call app.helpers.sum} {param first: $first /} {param second: $second /} {/call} /strong /div div Sum strong {call app.helpers.sum data= all /} /strong /div {/template} let template = app . templates . test ({ first : 1 , second : 5 }); goog.soy.renderElement let templateData = { first : 1 , second : 5 }; goog . soy . renderElement ( goog . dom . getElement ( container ), // element with innerHTML app . templates . test , // template templateData );","title":"Templates"},{"location":"templates/#soy","text":"https://developers.google.com/closure/templates/docs/concepts https://developers.google.com/closure/templates/docs/commands https://github.com/google/closure-templates/tree/master/examples/simple.soy https://github.com/google/closure-templates/tree/master/examples/features.soy","title":"Soy"},{"location":"templates/#basic","text":"{namespace app.template} /** * DOC */ {template .test} {@param p1: string} {@param p2: string} div {$p1} /div // one line comment div {$p2} /div /* block comment */ {/template}","title":"Basic"},{"location":"templates/#character-commands","text":"/** * Character commands */ { template . test } { sp } = space { nil } = empty string {\\ n } = newline ( line feed ) {\\ r } = carriage return {\\ t } = tab { lb } = left brace { rb } = right brace { / template } /** * RAW text example */ { template . test } { literal } RAW text ... preformatted { / literal } { / template }","title":"Character commands"},{"location":"templates/#commands","text":"{ print ...} {...} // implied print command { css ...} { let ... / } { let ...}...{ / let } { if ...}...{ elseif ...}...{ else ...}...{ / if } { switch ...}{ case ...}...{ default }...{ / switch } { foreach ...}...{ ifempty }...{ / foreach } { for ...}...{ / for } { call ... / } { delcall ... / } { call ...}{ param ... / }{ param ...}...{ / param }{ / call } { delcall ...}{ param ... / }{ param ...}...{ / param }{ / delcall } { log }...{ / log } { debugger } { msg ...}...{ / msg } /** * LET example */ { template . test } { let $a } 10 { / let } { let $b : 10 / } Value for a = { $a } Value for b = { $b } { / template } /** * LOG example - `window.console.log(...);` */ {template .test} {@param p1: number} div ... /div {log}Value of p1 = {$p1}{/log} {/template} /** * DEBUGGER example - `debugger;` */ { template . test } { if ...} { debugger } { / if } { / template }","title":"Commands"},{"location":"templates/#directive-helpers","text":"/** * Soy Directives. */ { template . test } { @param p1 : any } {$ p1 | noAutoescape } {$ p1 | escapeCssString } {$ p1 | filterCssValue } {$ p1 | cleanHtml } {$ p1 | escapeHtmlRcdata } {$ p1 | escapeHtmlAttribute } {$ p1 | escapeHtmlAttributeNospace } {$ p1 | filterHtmlAttributes } {$ p1 | filterHtmlElementName } {$ p1 | escapeJsRegex } {$ p1 | escapeJsString } {$ p1 | escapeJsValue } {$ p1 | filterNormalizeUri } {$ p1 | normalizeUri } {$ p1 | escapeUri } {$ p1 | changeNewlineToBr } {$ p1 | insertWordBreaks : 1 } {$ p1 | truncate : 1 , false } { / template } /** * Assume p1 = div content /div */ { template . test } { @ param p1 : html } {$ p1 | cleanHtml } // shows only `content` { / template } /** * Assume p1 = Test value */ { template . test } { @ param p1 : string } {$ p1 | truncate : 4 , false } // shows `Test` {$ p1 | truncate : 4 , true } // shows `T...` { / template }","title":"Directive (helpers)"},{"location":"templates/#function","text":"/** * Soy Functions */ { template . test } { @param p1 : any } /** Dummy example parameter. */ { @param p2 : any } /** Dummy example parameter. */ { augmentMap ( $ p1 , $ p2 ) } { ceiling ( $ p1 ) } { floor ( $ p1 ) } { isNonnull ( $ p1 ) } { keys ( $ p1 ) } { length ( $ p1 ) } { max ( $ p1 , $ p2 ) } { min ( $ p1 , $ p2 ) } { randomInt ( $ p1 ) } { round ( $ p1 ) } { strContains ( $ p1 , $ p2 ) } { / template }","title":"Function"},{"location":"templates/#i18n","text":"/** * MSG-PLURAL example - `goog.getMsg`, `goog.i18n.MessageFormat()` */ { template . test } {@ param p1 : int } { msg desc = Test message } { plural $ p1 } { case 1 } Message if p1 = 1 { case 2 } Message if p1 = 2 { default } Message for all other cases { / plural } { / msg } { / template } /** * MSG-SELECT example - `goog.getMsg`, goog.i18n.MessageFormat()` */ { template . test } {@ param p1 : string } { msg desc = Test message } { select $ p1 } { case male } Message for male { case female } Message for female { default } Message for all other cases { / select } { / msg } { / template }","title":"i18n"},{"location":"templates/#call-function-outside-soy","text":"goog . provide ( app.helpers ); /** * @param {Object. string, * =} opt_data * @param {(null|undefined)=} opt_ignored * @return {string} * @notypecheck */ app . helpers . sum = function ( opt_data , opt_ignored ) { return + ( opt_data . first + opt_data . second ); }; {namespace app.templates} /** * Calling function outside SOY */ {template .test} {@param first: number} {@param second: number} div Sum em {$first} /em and em {$second} /em is{sp} strong {call app.helpers.sum} {param first: $first /} {param second: $second /} {/call} /strong /div div Sum strong {call app.helpers.sum data= all /} /strong /div {/template} let template = app . templates . test ({ first : 1 , second : 5 });","title":"Call function outside SOY"},{"location":"templates/#googsoyrenderelement","text":"let templateData = { first : 1 , second : 5 }; goog . soy . renderElement ( goog . dom . getElement ( container ), // element with innerHTML app . templates . test , // template templateData );","title":"goog.soy.renderElement"},{"location":"ui/","text":"Life cycle [ construct ] / \\ [ render ] [ decorate ] \\ / [ enterDocument ] | [ ... ] | [ exitDocument ] | [ dispose ] Component /** * @param {goog.dom.DomHelper=} opt_domHelper * @constructor * @extends {goog.ui.Component} */ app . Component = function ( opt_domHelper ) { goog . base ( this , opt_domHelper ); }; goog . inherits ( app . Component , goog . ui . Component ); /** * Used in render scenario * @override */ app . Component . prototype . createDom = function () { let element = this . getDomHelper (). createDom ( div ); // ... this . setElementInternal ( element ); }; /** * Used in decorate scenario * @override */ app . Component . prototype . decorateInternal = function ( element ) { goog . base ( this , decorateInternal , element ); // ... }; /** * Can be component used in decorate scenario * @override */ app . Component . prototype . canDecorate = function () { return true ; } /** * @override */ app . Component . prototype . enterDocument = function () { goog . base ( this , enterDocument ); // this.getHandler().listen() // ... }; /** * @override */ app . Component . prototype . exitDocument = function () { goog . base ( this , exitDocument ); // unlisten is not necessary, parent remove all listeners from handler // ... }; /** * @override */ app . Component . prototype . disposeInternal = function () { // ... goog . base ( this , disposeInternal ); }; let component = new app . Component (); component . render (); // let container = goog.dom.getDocument().body; // component.render(body); let item = goog . dom . getElement ( item ); let component = new app . Component (); component . decorate ( item ); Control /** * @param {goog.ui.ControlContent} content * @param {goog.ui.ControlRenderer=} opt_renderer * @param {goog.dom.DomHelper=} opt_domHelper * @constructor * @extends {goog.ui.Control} */ app . Control = function ( content , opt_renderer , opt_domHelper ) { goog . base ( this , content , opt_renderer , opt_domHelper ); // this.setId(); // this.setAllowTextSelection(true); // this.setSupportedState(goog.ui.Component.State.ALL, false); }; goog . inherits ( app . Control , goog . ui . Control ); /** * @override */ app . Control . prototype . enterDocument = function () { goog . base ( this , enterDocument ); // ... }; /** * @override */ app . Control . prototype . exitDocument = function () { goog . base ( this , exitDocument ); // ... }; /** * @override */ app . Control . prototype . disposeInternal = function () { // ... goog . base ( this , disposeInternal ); }; /** * Default renderer */ goog . ui . registry . setDefaultRenderer ( app . Control , app . ControlRenderer ); ControlRenderer /** * @constructor * @extends {goog.ui.ControlRenderer} */ app . ControlRenderer = function () { goog . base ( this ); }; goog . inherits ( app . ControlRenderer , goog . ui . ControlRenderer ); goog . addSingletonGetter ( app . ControlRenderer ); /** * @type {string} */ app . ControlRenderer . CSS_CLASS = control ; /** * @return {string} */ app . ControlRenderer . prototype . getCssClass = function () { return app . ControlRenderer . CSS_CLASS ; }; /** * @override */ app . ControlRenderer . prototype . createDom = function ( control ) { let element = control . getDomHelper (). createDom ( div ); // ... return element ; }; /** * @override */ app . ControlRenderer . prototype . canDecorate = function ( element ) { return true ; }; /** * @override */ app . ControlRenderer . prototype . decorate = function ( control , element ) { let element = goog . base ( this , decorate , control , element ); // ... return element ; }; /** * Register control to CSS class name */ goog . ui . registry . setDecoratorByClassName ( app . ControlRenderer . CSS_CLASS , function () { return new app . Control (); } ); Container /** * @param {?goog.ui.Container.Orientation=} opt_orientation * @param {goog.ui.ContainerRenderer=} opt_renderer * @param {goog.dom.DomHelper=} opt_domHelper * @constructor * @extends {goog.ui.Container} */ app . Container = function ( opt_orientation , opt_renderer , opt_domHelper ) { // renderer app.ContainerRenderer.getInstance() goog . base ( this , opt_orientation , opt_renderer , opt_domHelper ); // this.setFocusable(false); }; goog . inherits ( app . Container , goog . ui . Container ); /** * @override */ app . Container . prototype . enterDocument = function () { goog . base ( this , enterDocument ); // ... }; // get control based on event target: // let control = this.getOwnerControl(/** @type {Node} */ (e.target)); // get control // let control = this.getChild(id); // remove all children // this.removeChildren(true); ContainerRenderer /** * @constructor * @extends {goog.ui.ContainerRenderer} */ app . ContainerRenderer = function () { goog . base ( this ); }; goog . inherits ( app . ContainerRenderer , goog . ui . ContainerRenderer ); goog . addSingletonGetter ( app . ContainerRenderer ); /** * @type {string} */ app . ContainerRenderer . CSS_CLASS = container ; /** * @inheritDoc */ app . ContainerRenderer . prototype . getCssClass = function () { return app . ContainerRenderer . CSS_CLASS ; }; /** * @override */ app . ContainerRenderer . prototype . createDom = function ( container ) { let element = container . getDomHelper (). createDom ( div , this . getClassNames ( container ). join ( ) ); // ... return element ; }; /** * @override */ app . ContainerRenderer . prototype . canDecorate = function ( element ) { return true ; }; /** * @override */ app . ContainerRenderer . prototype . decorate = function ( container , element ) { let element = goog . base ( this , decorate , container , element ); // ... return element ; };","title":"Ui"},{"location":"ui/#life-cycle","text":"[ construct ] / \\ [ render ] [ decorate ] \\ / [ enterDocument ] | [ ... ] | [ exitDocument ] | [ dispose ]","title":"Life cycle"},{"location":"ui/#component","text":"/** * @param {goog.dom.DomHelper=} opt_domHelper * @constructor * @extends {goog.ui.Component} */ app . Component = function ( opt_domHelper ) { goog . base ( this , opt_domHelper ); }; goog . inherits ( app . Component , goog . ui . Component ); /** * Used in render scenario * @override */ app . Component . prototype . createDom = function () { let element = this . getDomHelper (). createDom ( div ); // ... this . setElementInternal ( element ); }; /** * Used in decorate scenario * @override */ app . Component . prototype . decorateInternal = function ( element ) { goog . base ( this , decorateInternal , element ); // ... }; /** * Can be component used in decorate scenario * @override */ app . Component . prototype . canDecorate = function () { return true ; } /** * @override */ app . Component . prototype . enterDocument = function () { goog . base ( this , enterDocument ); // this.getHandler().listen() // ... }; /** * @override */ app . Component . prototype . exitDocument = function () { goog . base ( this , exitDocument ); // unlisten is not necessary, parent remove all listeners from handler // ... }; /** * @override */ app . Component . prototype . disposeInternal = function () { // ... goog . base ( this , disposeInternal ); }; let component = new app . Component (); component . render (); // let container = goog.dom.getDocument().body; // component.render(body); let item = goog . dom . getElement ( item ); let component = new app . Component (); component . decorate ( item );","title":"Component"},{"location":"ui/#control","text":"/** * @param {goog.ui.ControlContent} content * @param {goog.ui.ControlRenderer=} opt_renderer * @param {goog.dom.DomHelper=} opt_domHelper * @constructor * @extends {goog.ui.Control} */ app . Control = function ( content , opt_renderer , opt_domHelper ) { goog . base ( this , content , opt_renderer , opt_domHelper ); // this.setId(); // this.setAllowTextSelection(true); // this.setSupportedState(goog.ui.Component.State.ALL, false); }; goog . inherits ( app . Control , goog . ui . Control ); /** * @override */ app . Control . prototype . enterDocument = function () { goog . base ( this , enterDocument ); // ... }; /** * @override */ app . Control . prototype . exitDocument = function () { goog . base ( this , exitDocument ); // ... }; /** * @override */ app . Control . prototype . disposeInternal = function () { // ... goog . base ( this , disposeInternal ); }; /** * Default renderer */ goog . ui . registry . setDefaultRenderer ( app . Control , app . ControlRenderer );","title":"Control"},{"location":"ui/#controlrenderer","text":"/** * @constructor * @extends {goog.ui.ControlRenderer} */ app . ControlRenderer = function () { goog . base ( this ); }; goog . inherits ( app . ControlRenderer , goog . ui . ControlRenderer ); goog . addSingletonGetter ( app . ControlRenderer ); /** * @type {string} */ app . ControlRenderer . CSS_CLASS = control ; /** * @return {string} */ app . ControlRenderer . prototype . getCssClass = function () { return app . ControlRenderer . CSS_CLASS ; }; /** * @override */ app . ControlRenderer . prototype . createDom = function ( control ) { let element = control . getDomHelper (). createDom ( div ); // ... return element ; }; /** * @override */ app . ControlRenderer . prototype . canDecorate = function ( element ) { return true ; }; /** * @override */ app . ControlRenderer . prototype . decorate = function ( control , element ) { let element = goog . base ( this , decorate , control , element ); // ... return element ; }; /** * Register control to CSS class name */ goog . ui . registry . setDecoratorByClassName ( app . ControlRenderer . CSS_CLASS , function () { return new app . Control (); } );","title":"ControlRenderer"},{"location":"ui/#container","text":"/** * @param {?goog.ui.Container.Orientation=} opt_orientation * @param {goog.ui.ContainerRenderer=} opt_renderer * @param {goog.dom.DomHelper=} opt_domHelper * @constructor * @extends {goog.ui.Container} */ app . Container = function ( opt_orientation , opt_renderer , opt_domHelper ) { // renderer app.ContainerRenderer.getInstance() goog . base ( this , opt_orientation , opt_renderer , opt_domHelper ); // this.setFocusable(false); }; goog . inherits ( app . Container , goog . ui . Container ); /** * @override */ app . Container . prototype . enterDocument = function () { goog . base ( this , enterDocument ); // ... }; // get control based on event target: // let control = this.getOwnerControl(/** @type {Node} */ (e.target)); // get control // let control = this.getChild(id); // remove all children // this.removeChildren(true);","title":"Container"},{"location":"ui/#containerrenderer","text":"/** * @constructor * @extends {goog.ui.ContainerRenderer} */ app . ContainerRenderer = function () { goog . base ( this ); }; goog . inherits ( app . ContainerRenderer , goog . ui . ContainerRenderer ); goog . addSingletonGetter ( app . ContainerRenderer ); /** * @type {string} */ app . ContainerRenderer . CSS_CLASS = container ; /** * @inheritDoc */ app . ContainerRenderer . prototype . getCssClass = function () { return app . ContainerRenderer . CSS_CLASS ; }; /** * @override */ app . ContainerRenderer . prototype . createDom = function ( container ) { let element = container . getDomHelper (). createDom ( div , this . getClassNames ( container ). join ( ) ); // ... return element ; }; /** * @override */ app . ContainerRenderer . prototype . canDecorate = function ( element ) { return true ; }; /** * @override */ app . ContainerRenderer . prototype . decorate = function ( container , element ) { let element = goog . base ( this , decorate , container , element ); // ... return element ; };","title":"ContainerRenderer"}]}